
/Users/zacharyhirschtritt/projects/sbk-led-sign/particle-firmware/sign-controller/bin/sign-controller-photon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020d8  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000008  40024000  080a20f0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         0000006c  20000300  080a20f8  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000005e8  2000036c  2000036c  0003036c  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a2164  080a2164  00022164  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a218c  080a218c  0002218c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00091746  00000000  00000000  00022190  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000de42  00000000  00000000  000b38d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000f94c  00000000  00000000  000c1718  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001880  00000000  00000000  000d1064  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002968  00000000  00000000  000d28e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000230c0  00000000  00000000  000d524c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001ee95  00000000  00000000  000f830c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00090d56  00000000  00000000  001171a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000a6ac  00000000  00000000  001a7ef8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	30 1e 0a 08                                         0...

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fec7 	bl	80a1dc0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fecc 	bl	80a1dd6 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a20f8 	.word	0x080a20f8
 80a004c:	2000036c 	.word	0x2000036c
 80a0050:	2000036c 	.word	0x2000036c
 80a0054:	20000954 	.word	0x20000954
 80a0058:	20000954 	.word	0x20000954

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 f97d 	bl	80a135c <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a20bc 	.word	0x080a20bc
 80a0084:	080a20f0 	.word	0x080a20f0

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b8bc 	b.w	80a0204 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f83d 	bl	80a010c <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 b91f 	b.w	80a12d8 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bba7 	b.w	80a07ec <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bbad 	b.w	80a07fc <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZNSt17_Function_handlerIFvPKcS1_EPFiS1_S1_EE9_M_invokeERKSt9_Any_dataOS1_S9_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a00b2:	b410      	push	{r4}
 80a00b4:	460c      	mov	r4, r1
      {
	(*_Base::_M_get_pointer(__functor))(
 80a00b6:	6803      	ldr	r3, [r0, #0]
 80a00b8:	6811      	ldr	r1, [r2, #0]
 80a00ba:	6820      	ldr	r0, [r4, #0]
	    std::forward<_ArgTypes>(__args)...);
      }
 80a00bc:	bc10      	pop	{r4}

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80a00be:	4718      	bx	r3

080a00c0 <_ZNSt14_Function_base13_Base_managerIPFiPKcS2_EE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a00c0:	2a01      	cmp	r2, #1
 80a00c2:	d002      	beq.n	80a00ca <_ZNSt14_Function_base13_Base_managerIPFiPKcS2_EE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
 80a00c4:	2a02      	cmp	r2, #2
 80a00c6:	d002      	beq.n	80a00ce <_ZNSt14_Function_base13_Base_managerIPFiPKcS2_EE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xe>
 80a00c8:	e004      	b.n	80a00d4 <_ZNSt14_Function_base13_Base_managerIPFiPKcS2_EE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a00ca:	6001      	str	r1, [r0, #0]
	      break;
 80a00cc:	e002      	b.n	80a00d4 <_ZNSt14_Function_base13_Base_managerIPFiPKcS2_EE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a00ce:	680b      	ldr	r3, [r1, #0]
 80a00d0:	b100      	cbz	r0, 80a00d4 <_ZNSt14_Function_base13_Base_managerIPFiPKcS2_EE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
 80a00d2:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a00d4:	2000      	movs	r0, #0
 80a00d6:	4770      	bx	lr

080a00d8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.17>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a00d8:	b510      	push	{r4, lr}
 80a00da:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a00dc:	6803      	ldr	r3, [r0, #0]
 80a00de:	689b      	ldr	r3, [r3, #8]
 80a00e0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a00e2:	68a3      	ldr	r3, [r4, #8]
 80a00e4:	3b01      	subs	r3, #1
 80a00e6:	60a3      	str	r3, [r4, #8]
 80a00e8:	b92b      	cbnz	r3, 80a00f6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.17+0x1e>
            _M_destroy();
 80a00ea:	6823      	ldr	r3, [r4, #0]
 80a00ec:	4620      	mov	r0, r4
        }
    }
 80a00ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a00f2:	68db      	ldr	r3, [r3, #12]
 80a00f4:	4718      	bx	r3
 80a00f6:	bd10      	pop	{r4, pc}

080a00f8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a00f8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a00fa:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a00fc:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a00fe:	b113      	cbz	r3, 80a0106 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0100:	2203      	movs	r2, #3
 80a0102:	4601      	mov	r1, r0
 80a0104:	4798      	blx	r3
    }
 80a0106:	4620      	mov	r0, r4
 80a0108:	bd10      	pop	{r4, pc}
	...

080a010c <loop>:
  Particle.subscribe("sbkSign/toggleLight", toggleLED, MY_DEVICES);
  Particle.variable("lightState", ledState);
}

void loop(){
  if (fadeState == 0) {
 80a010c:	4b07      	ldr	r3, [pc, #28]	; (80a012c <loop+0x20>)
 80a010e:	681b      	ldr	r3, [r3, #0]
 80a0110:	b913      	cbnz	r3, 80a0118 <loop+0xc>
    led.off();
 80a0112:	4807      	ldr	r0, [pc, #28]	; (80a0130 <loop+0x24>)
 80a0114:	f000 b961 	b.w	80a03da <_ZN11RGBControls3Led3offEv>
  } else if (fadeState == 1) {
 80a0118:	2b01      	cmp	r3, #1
 80a011a:	d106      	bne.n	80a012a <loop+0x1e>
    led.fade(colors, 3, 3000);
 80a011c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80a0120:	2203      	movs	r2, #3
 80a0122:	4904      	ldr	r1, [pc, #16]	; (80a0134 <loop+0x28>)
 80a0124:	4802      	ldr	r0, [pc, #8]	; (80a0130 <loop+0x24>)
 80a0126:	f000 b9ad 	b.w	80a0484 <_ZN11RGBControls3Led4fadeEPNS_5ColorEii>
 80a012a:	4770      	bx	lr
 80a012c:	200003d4 	.word	0x200003d4
 80a0130:	20000388 	.word	0x20000388
 80a0134:	200003b0 	.word	0x200003b0

080a0138 <_Z8toggleOnv>:
    if (toggleOn()) ledState = true;
    return 1;
  }
}

int toggleOn(){
 80a0138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  fadeState = 1;
 80a013a:	4b0c      	ldr	r3, [pc, #48]	; (80a016c <_Z8toggleOnv+0x34>)
 80a013c:	2201      	movs	r2, #1
 80a013e:	601a      	str	r2, [r3, #0]
 80a0140:	4b0b      	ldr	r3, [pc, #44]	; (80a0170 <_Z8toggleOnv+0x38>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0142:	a802      	add	r0, sp, #8
 80a0144:	781b      	ldrb	r3, [r3, #0]
 80a0146:	4a0b      	ldr	r2, [pc, #44]	; (80a0174 <_Z8toggleOnv+0x3c>)
 80a0148:	f88d 3000 	strb.w	r3, [sp]
 80a014c:	490a      	ldr	r1, [pc, #40]	; (80a0178 <_Z8toggleOnv+0x40>)
 80a014e:	233c      	movs	r3, #60	; 0x3c
 80a0150:	f000 fcdc 	bl	80a0b0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0154:	9803      	ldr	r0, [sp, #12]
 80a0156:	b128      	cbz	r0, 80a0164 <_Z8toggleOnv+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0158:	6843      	ldr	r3, [r0, #4]
 80a015a:	3b01      	subs	r3, #1
 80a015c:	6043      	str	r3, [r0, #4]
 80a015e:	b90b      	cbnz	r3, 80a0164 <_Z8toggleOnv+0x2c>
 80a0160:	f7ff ffba 	bl	80a00d8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.17>
  Particle.publish("sbkSign/lightState","on", 60, PRIVATE);
  return 1;
}
 80a0164:	2001      	movs	r0, #1
 80a0166:	b005      	add	sp, #20
 80a0168:	f85d fb04 	ldr.w	pc, [sp], #4
 80a016c:	200003d4 	.word	0x200003d4
 80a0170:	200003a0 	.word	0x200003a0
 80a0174:	080a1e44 	.word	0x080a1e44
 80a0178:	080a1e47 	.word	0x080a1e47

080a017c <_Z9toggleOffv>:

int toggleOff(){
 80a017c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  fadeState = 0;
 80a017e:	4b0c      	ldr	r3, [pc, #48]	; (80a01b0 <_Z9toggleOffv+0x34>)
 80a0180:	2200      	movs	r2, #0
 80a0182:	601a      	str	r2, [r3, #0]
 80a0184:	4b0b      	ldr	r3, [pc, #44]	; (80a01b4 <_Z9toggleOffv+0x38>)
 80a0186:	a802      	add	r0, sp, #8
 80a0188:	781b      	ldrb	r3, [r3, #0]
 80a018a:	4a0b      	ldr	r2, [pc, #44]	; (80a01b8 <_Z9toggleOffv+0x3c>)
 80a018c:	f88d 3000 	strb.w	r3, [sp]
 80a0190:	490a      	ldr	r1, [pc, #40]	; (80a01bc <_Z9toggleOffv+0x40>)
 80a0192:	233c      	movs	r3, #60	; 0x3c
 80a0194:	f000 fcba 	bl	80a0b0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0198:	9803      	ldr	r0, [sp, #12]
 80a019a:	b128      	cbz	r0, 80a01a8 <_Z9toggleOffv+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a019c:	6843      	ldr	r3, [r0, #4]
 80a019e:	3b01      	subs	r3, #1
 80a01a0:	6043      	str	r3, [r0, #4]
 80a01a2:	b90b      	cbnz	r3, 80a01a8 <_Z9toggleOffv+0x2c>
 80a01a4:	f7ff ff98 	bl	80a00d8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.17>
  Particle.publish("sbkSign/lightState", "off", 60, PRIVATE);
  return 1;
 80a01a8:	2001      	movs	r0, #1
 80a01aa:	b005      	add	sp, #20
 80a01ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80a01b0:	200003d4 	.word	0x200003d4
 80a01b4:	200003a0 	.word	0x200003a0
 80a01b8:	080a1e5a 	.word	0x080a1e5a
 80a01bc:	080a1e47 	.word	0x080a1e47

080a01c0 <_Z9toggleLEDPKcS0_>:
  } else if (fadeState == 1) {
    led.fade(colors, 3, 3000);
  }
}

int toggleLED(const char *event, const char *data) {
 80a01c0:	b510      	push	{r4, lr}
  if (ledState) {
 80a01c2:	4c07      	ldr	r4, [pc, #28]	; (80a01e0 <_Z9toggleLEDPKcS0_+0x20>)
 80a01c4:	7823      	ldrb	r3, [r4, #0]
 80a01c6:	b123      	cbz	r3, 80a01d2 <_Z9toggleLEDPKcS0_+0x12>
    if (toggleOff()) ledState = false;
 80a01c8:	f7ff ffd8 	bl	80a017c <_Z9toggleOffv>
 80a01cc:	b130      	cbz	r0, 80a01dc <_Z9toggleLEDPKcS0_+0x1c>
 80a01ce:	2300      	movs	r3, #0
 80a01d0:	e003      	b.n	80a01da <_Z9toggleLEDPKcS0_+0x1a>
    return 1;
  } else {
    if (toggleOn()) ledState = true;
 80a01d2:	f7ff ffb1 	bl	80a0138 <_Z8toggleOnv>
 80a01d6:	b108      	cbz	r0, 80a01dc <_Z9toggleLEDPKcS0_+0x1c>
 80a01d8:	2301      	movs	r3, #1
 80a01da:	7023      	strb	r3, [r4, #0]
    return 1;
  }
}
 80a01dc:	2001      	movs	r0, #1
 80a01de:	bd10      	pop	{r4, pc}
 80a01e0:	40024000 	.word	0x40024000

080a01e4 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a01e4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a01e6:	2300      	movs	r3, #0
 80a01e8:	6083      	str	r3, [r0, #8]
 80a01ea:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a01ec:	4604      	mov	r4, r0
 80a01ee:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a01f0:	b12b      	cbz	r3, 80a01fe <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a01f2:	2202      	movs	r2, #2
 80a01f4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a01f6:	68eb      	ldr	r3, [r5, #12]
 80a01f8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a01fa:	68ab      	ldr	r3, [r5, #8]
 80a01fc:	60a3      	str	r3, [r4, #8]
	}
    }
 80a01fe:	4620      	mov	r0, r4
 80a0200:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0204 <setup>:
int toggleOn();
int toggleLED(const char *event, const char *data);

int fadeState = 0;

void setup(){
 80a0204:	b510      	push	{r4, lr}
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a0206:	4b15      	ldr	r3, [pc, #84]	; (80a025c <setup+0x58>)
 80a0208:	b08a      	sub	sp, #40	; 0x28
 80a020a:	9302      	str	r3, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a020c:	4b14      	ldr	r3, [pc, #80]	; (80a0260 <setup+0x5c>)
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, MY_DEVICES, deviceID, NULL), false);
    }

    bool subscribe(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return subscribe_wiring(eventName, handler, scope);
 80a020e:	a902      	add	r1, sp, #8
 80a0210:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80a0212:	4b14      	ldr	r3, [pc, #80]	; (80a0264 <setup+0x60>)
 80a0214:	a806      	add	r0, sp, #24
 80a0216:	9304      	str	r3, [sp, #16]
 80a0218:	f7ff ffe4 	bl	80a01e4 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
 80a021c:	9b08      	ldr	r3, [sp, #32]
 80a021e:	b17b      	cbz	r3, 80a0240 <setup+0x3c>
        {
            auto wrapper = new wiring_event_handler_t(handler);
 80a0220:	2010      	movs	r0, #16
 80a0222:	f7ff ff3a 	bl	80a009a <_Znwj>
 80a0226:	4604      	mov	r4, r0
 80a0228:	b150      	cbz	r0, 80a0240 <setup+0x3c>
 80a022a:	a906      	add	r1, sp, #24
 80a022c:	f7ff ffda 	bl	80a01e4 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
 80a0230:	2300      	movs	r3, #0
 80a0232:	9301      	str	r3, [sp, #4]
 80a0234:	9300      	str	r3, [sp, #0]
 80a0236:	4622      	mov	r2, r4
 80a0238:	490b      	ldr	r1, [pc, #44]	; (80a0268 <setup+0x64>)
 80a023a:	480c      	ldr	r0, [pc, #48]	; (80a026c <setup+0x68>)
 80a023c:	f000 fac6 	bl	80a07cc <spark_subscribe>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0240:	a806      	add	r0, sp, #24
 80a0242:	f7ff ff59 	bl	80a00f8 <_ZNSt14_Function_baseD1Ev>
 80a0246:	a802      	add	r0, sp, #8
 80a0248:	f7ff ff56 	bl	80a00f8 <_ZNSt14_Function_baseD1Ev>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80a024c:	2300      	movs	r3, #0
 80a024e:	2201      	movs	r2, #1
 80a0250:	4907      	ldr	r1, [pc, #28]	; (80a0270 <setup+0x6c>)
 80a0252:	4808      	ldr	r0, [pc, #32]	; (80a0274 <setup+0x70>)
 80a0254:	f000 faaa 	bl	80a07ac <spark_variable>
  Particle.subscribe("sbkSign/toggleLight", toggleLED, MY_DEVICES);
  Particle.variable("lightState", ledState);
}
 80a0258:	b00a      	add	sp, #40	; 0x28
 80a025a:	bd10      	pop	{r4, pc}
 80a025c:	080a01c1 	.word	0x080a01c1
 80a0260:	080a00b3 	.word	0x080a00b3
 80a0264:	080a00c1 	.word	0x080a00c1
 80a0268:	080a08b3 	.word	0x080a08b3
 80a026c:	080a1e5e 	.word	0x080a1e5e
 80a0270:	40024000 	.word	0x40024000
 80a0274:	080a1e4f 	.word	0x080a1e4f

080a0278 <_GLOBAL__sub_I_led>:

int toggleOff(){
  fadeState = 0;
  Particle.publish("sbkSign/lightState", "off", 60, PRIVATE);
  return 1;
 80a0278:	b573      	push	{r0, r1, r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a027a:	4b19      	ldr	r3, [pc, #100]	; (80a02e0 <_GLOBAL__sub_I_led+0x68>)
 80a027c:	2401      	movs	r4, #1
 80a027e:	701c      	strb	r4, [r3, #0]
#define GREENPIN D2
#define BLUEPIN D1

Led led(REDPIN, GREENPIN, BLUEPIN);

Color red(255, 0, 0);
 80a0280:	4e18      	ldr	r6, [pc, #96]	; (80a02e4 <_GLOBAL__sub_I_led+0x6c>)
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0282:	f000 f979 	bl	80a0578 <HAL_Pin_Map>

#define REDPIN D0
#define GREENPIN D2
#define BLUEPIN D1

Led led(REDPIN, GREENPIN, BLUEPIN);
 80a0286:	9400      	str	r4, [sp, #0]
 80a0288:	4623      	mov	r3, r4
 80a028a:	2202      	movs	r2, #2
 80a028c:	2100      	movs	r1, #0
 80a028e:	4816      	ldr	r0, [pc, #88]	; (80a02e8 <_GLOBAL__sub_I_led+0x70>)
 80a0290:	f000 f865 	bl	80a035e <_ZN11RGBControls3LedC1Eiiib>

Color red(255, 0, 0);
 80a0294:	2300      	movs	r3, #0
 80a0296:	461a      	mov	r2, r3
Color green(0, 255, 0);
 80a0298:	4d14      	ldr	r5, [pc, #80]	; (80a02ec <_GLOBAL__sub_I_led+0x74>)
#define GREENPIN D2
#define BLUEPIN D1

Led led(REDPIN, GREENPIN, BLUEPIN);

Color red(255, 0, 0);
 80a029a:	21ff      	movs	r1, #255	; 0xff
 80a029c:	4630      	mov	r0, r6
 80a029e:	f000 f82b 	bl	80a02f8 <_ZN11RGBControls5ColorC1Eiii>
Color green(0, 255, 0);
 80a02a2:	2300      	movs	r3, #0
 80a02a4:	4619      	mov	r1, r3
Color blue(0, 0, 255);
 80a02a6:	4c12      	ldr	r4, [pc, #72]	; (80a02f0 <_GLOBAL__sub_I_led+0x78>)
#define BLUEPIN D1

Led led(REDPIN, GREENPIN, BLUEPIN);

Color red(255, 0, 0);
Color green(0, 255, 0);
 80a02a8:	22ff      	movs	r2, #255	; 0xff
 80a02aa:	4628      	mov	r0, r5
 80a02ac:	f000 f824 	bl	80a02f8 <_ZN11RGBControls5ColorC1Eiii>
Color blue(0, 0, 255);
 80a02b0:	2200      	movs	r2, #0
 80a02b2:	23ff      	movs	r3, #255	; 0xff
 80a02b4:	4611      	mov	r1, r2
 80a02b6:	4620      	mov	r0, r4
 80a02b8:	f000 f81e 	bl	80a02f8 <_ZN11RGBControls5ColorC1Eiii>

Color colors[3] = {red, green, blue};
 80a02bc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80a02c0:	4b0c      	ldr	r3, [pc, #48]	; (80a02f4 <_GLOBAL__sub_I_led+0x7c>)
 80a02c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80a02c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80a02ca:	f103 060c 	add.w	r6, r3, #12
 80a02ce:	3318      	adds	r3, #24
 80a02d0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80a02d4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80a02d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

int toggleOff(){
  fadeState = 0;
  Particle.publish("sbkSign/lightState", "off", 60, PRIVATE);
  return 1;
 80a02dc:	b002      	add	sp, #8
 80a02de:	bd70      	pop	{r4, r5, r6, pc}
 80a02e0:	200003a0 	.word	0x200003a0
 80a02e4:	20000370 	.word	0x20000370
 80a02e8:	20000388 	.word	0x20000388
 80a02ec:	200003a4 	.word	0x200003a4
 80a02f0:	2000037c 	.word	0x2000037c
 80a02f4:	200003b0 	.word	0x200003b0

080a02f8 <_ZN11RGBControls5ColorC1Eiii>:
#include "application.h"
#include "rgb-controls.h"


namespace RGBControls {
  Color::Color(int r, int g, int b) {
 80a02f8:	b510      	push	{r4, lr}
    red = r;
    green = g;
    blue = b;
 80a02fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }
 80a02fe:	bd10      	pop	{r4, pc}

080a0300 <_ZN11RGBControls5Color4lerpES0_f>:
    int g = green * brightness / 100;
    int b = blue  * brightness / 100;
    return Color(r, g, b);
  }

  Color Color::lerp(Color to, float t) {
 80a0300:	b082      	sub	sp, #8
 80a0302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0304:	4604      	mov	r4, r0
 80a0306:	a806      	add	r0, sp, #24
 80a0308:	e880 000c 	stmia.w	r0, {r2, r3}
    int dR = (to.red - red) * t;
    int dG = (to.green - green) * t;
 80a030c:	684e      	ldr	r6, [r1, #4]
    int dB = (to.blue - blue) * t;
    return Color(red + dR, green + dG, blue + dB);
 80a030e:	9807      	ldr	r0, [sp, #28]
    int b = blue  * brightness / 100;
    return Color(r, g, b);
  }

  Color Color::lerp(Color to, float t) {
    int dR = (to.red - red) * t;
 80a0310:	680f      	ldr	r7, [r1, #0]
    int dG = (to.green - green) * t;
    int dB = (to.blue - blue) * t;
    return Color(red + dR, green + dG, blue + dB);
 80a0312:	1b80      	subs	r0, r0, r6
  }

  Color Color::lerp(Color to, float t) {
    int dR = (to.red - red) * t;
    int dG = (to.green - green) * t;
    int dB = (to.blue - blue) * t;
 80a0314:	688d      	ldr	r5, [r1, #8]
    return Color(red + dR, green + dG, blue + dB);
 80a0316:	f001 fb05 	bl	80a1924 <__aeabi_i2f>
 80a031a:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a031c:	f001 fb56 	bl	80a19cc <__aeabi_fmul>
 80a0320:	f001 fd1a 	bl	80a1d58 <__aeabi_f2iz>
 80a0324:	4406      	add	r6, r0
 80a0326:	9808      	ldr	r0, [sp, #32]
 80a0328:	1b40      	subs	r0, r0, r5
 80a032a:	f001 fafb 	bl	80a1924 <__aeabi_i2f>
 80a032e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0330:	f001 fb4c 	bl	80a19cc <__aeabi_fmul>
 80a0334:	f001 fd10 	bl	80a1d58 <__aeabi_f2iz>
 80a0338:	4405      	add	r5, r0
#include "rgb-controls.h"


namespace RGBControls {
  Color::Color(int r, int g, int b) {
    red = r;
 80a033a:	9806      	ldr	r0, [sp, #24]
 80a033c:	1bc0      	subs	r0, r0, r7
 80a033e:	f001 faf1 	bl	80a1924 <__aeabi_i2f>
 80a0342:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0344:	f001 fb42 	bl	80a19cc <__aeabi_fmul>
 80a0348:	f001 fd06 	bl	80a1d58 <__aeabi_f2iz>
 80a034c:	4438      	add	r0, r7
    green = g;
 80a034e:	e884 0041 	stmia.w	r4, {r0, r6}
    blue = b;
 80a0352:	60a5      	str	r5, [r4, #8]
  Color Color::lerp(Color to, float t) {
    int dR = (to.red - red) * t;
    int dG = (to.green - green) * t;
    int dB = (to.blue - blue) * t;
    return Color(red + dR, green + dG, blue + dB);
  }
 80a0354:	4620      	mov	r0, r4
 80a0356:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80a035a:	b002      	add	sp, #8
 80a035c:	4770      	bx	lr

080a035e <_ZN11RGBControls3LedC1Eiiib>:

  Led::Led(int rPin, int gPin, int bPin, bool isCathode) {
 80a035e:	b538      	push	{r3, r4, r5, lr}
 80a0360:	4604      	mov	r4, r0
 80a0362:	4608      	mov	r0, r1
    _rPin = rPin;
    _gPin = gPin;
    _bPin = bPin;
 80a0364:	e884 000d 	stmia.w	r4, {r0, r2, r3}
    _step = 1;
    _isCathode = isCathode;
 80a0368:	f89d 3010 	ldrb.w	r3, [sp, #16]

  Led::Led(int rPin, int gPin, int bPin, bool isCathode) {
    _rPin = rPin;
    _gPin = gPin;
    _bPin = bPin;
    _step = 1;
 80a036c:	2501      	movs	r5, #1
    _isCathode = isCathode;
 80a036e:	7323      	strb	r3, [r4, #12]
    pinMode(_rPin, OUTPUT);
 80a0370:	4629      	mov	r1, r5

  Led::Led(int rPin, int gPin, int bPin, bool isCathode) {
    _rPin = rPin;
    _gPin = gPin;
    _bPin = bPin;
    _step = 1;
 80a0372:	6125      	str	r5, [r4, #16]
    _isCathode = isCathode;
    pinMode(_rPin, OUTPUT);
 80a0374:	b280      	uxth	r0, r0
 80a0376:	f001 f839 	bl	80a13ec <pinMode>
    pinMode(_gPin, OUTPUT);
 80a037a:	4629      	mov	r1, r5
 80a037c:	88a0      	ldrh	r0, [r4, #4]
 80a037e:	f001 f835 	bl	80a13ec <pinMode>
    pinMode(_bPin, OUTPUT);
 80a0382:	8920      	ldrh	r0, [r4, #8]
 80a0384:	4629      	mov	r1, r5
 80a0386:	f001 f831 	bl	80a13ec <pinMode>
  }
 80a038a:	4620      	mov	r0, r4
 80a038c:	bd38      	pop	{r3, r4, r5, pc}

080a038e <_ZN11RGBControls3Led8setColorENS_5ColorE>:

  void Led::setColor(Color c) {
 80a038e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a0390:	4604      	mov	r4, r0
 80a0392:	a804      	add	r0, sp, #16
 80a0394:	e900 000e 	stmdb	r0, {r1, r2, r3}
    if (_isCathode) {
 80a0398:	7b23      	ldrb	r3, [r4, #12]
 80a039a:	9901      	ldr	r1, [sp, #4]
 80a039c:	9e02      	ldr	r6, [sp, #8]
 80a039e:	9d03      	ldr	r5, [sp, #12]
 80a03a0:	6820      	ldr	r0, [r4, #0]
 80a03a2:	b143      	cbz	r3, 80a03b6 <_ZN11RGBControls3Led8setColorENS_5ColorE+0x28>
      analogWrite(_rPin, c.red);
 80a03a4:	b280      	uxth	r0, r0
 80a03a6:	f001 f832 	bl	80a140e <_Z11analogWritetm>
      analogWrite(_gPin, c.green);
 80a03aa:	4631      	mov	r1, r6
 80a03ac:	88a0      	ldrh	r0, [r4, #4]
 80a03ae:	f001 f82e 	bl	80a140e <_Z11analogWritetm>
      analogWrite(_bPin, c.blue);
 80a03b2:	4629      	mov	r1, r5
 80a03b4:	e00b      	b.n	80a03ce <_ZN11RGBControls3Led8setColorENS_5ColorE+0x40>
    } else {
      analogWrite(_rPin, 255 - c.red);
 80a03b6:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 80a03ba:	b280      	uxth	r0, r0
 80a03bc:	f001 f827 	bl	80a140e <_Z11analogWritetm>
      analogWrite(_gPin, 255 - c.green);
 80a03c0:	f1c6 01ff 	rsb	r1, r6, #255	; 0xff
 80a03c4:	88a0      	ldrh	r0, [r4, #4]
 80a03c6:	f001 f822 	bl	80a140e <_Z11analogWritetm>
      analogWrite(_bPin, 255 - c.blue);
 80a03ca:	f1c5 01ff 	rsb	r1, r5, #255	; 0xff
 80a03ce:	8920      	ldrh	r0, [r4, #8]
    }
  }
 80a03d0:	b004      	add	sp, #16
 80a03d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      analogWrite(_gPin, c.green);
      analogWrite(_bPin, c.blue);
    } else {
      analogWrite(_rPin, 255 - c.red);
      analogWrite(_gPin, 255 - c.green);
      analogWrite(_bPin, 255 - c.blue);
 80a03d6:	f001 b81a 	b.w	80a140e <_Z11analogWritetm>

080a03da <_ZN11RGBControls3Led3offEv>:
    }
  }

  void Led::off() {
 80a03da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#include "rgb-controls.h"


namespace RGBControls {
  Color::Color(int r, int g, int b) {
    red = r;
 80a03dc:	2300      	movs	r3, #0
 80a03de:	9301      	str	r3, [sp, #4]
    green = g;
 80a03e0:	9302      	str	r3, [sp, #8]
    blue = b;
 80a03e2:	9303      	str	r3, [sp, #12]
    }
  }

  void Led::off() {
    Color black(0, 0, 0);
    setColor(black);
 80a03e4:	ab04      	add	r3, sp, #16
 80a03e6:	e913 000e 	ldmdb	r3, {r1, r2, r3}
 80a03ea:	f7ff ffd0 	bl	80a038e <_ZN11RGBControls3Led8setColorENS_5ColorE>
  }
 80a03ee:	b005      	add	sp, #20
 80a03f0:	f85d fb04 	ldr.w	pc, [sp], #4

080a03f4 <_ZN11RGBControls3Led4stepEii>:
      delay(25);
    }
  }

  bool isIncreasing = true;
  void Led::step(int min, int max) {
 80a03f4:	b570      	push	{r4, r5, r6, lr}
    _step = _step + (isIncreasing ? 1 : -1);
 80a03f6:	4c09      	ldr	r4, [pc, #36]	; (80a041c <_ZN11RGBControls3Led4stepEii+0x28>)
 80a03f8:	6903      	ldr	r3, [r0, #16]
 80a03fa:	7825      	ldrb	r5, [r4, #0]
 80a03fc:	2d00      	cmp	r5, #0
 80a03fe:	bf14      	ite	ne
 80a0400:	2601      	movne	r6, #1
 80a0402:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
 80a0406:	4433      	add	r3, r6
    if (_step >= max || _step <= min) isIncreasing = !isIncreasing;
 80a0408:	4293      	cmp	r3, r2
    }
  }

  bool isIncreasing = true;
  void Led::step(int min, int max) {
    _step = _step + (isIncreasing ? 1 : -1);
 80a040a:	6103      	str	r3, [r0, #16]
    if (_step >= max || _step <= min) isIncreasing = !isIncreasing;
 80a040c:	da01      	bge.n	80a0412 <_ZN11RGBControls3Led4stepEii+0x1e>
 80a040e:	428b      	cmp	r3, r1
 80a0410:	dc02      	bgt.n	80a0418 <_ZN11RGBControls3Led4stepEii+0x24>
 80a0412:	f085 0501 	eor.w	r5, r5, #1
 80a0416:	7025      	strb	r5, [r4, #0]
 80a0418:	bd70      	pop	{r4, r5, r6, pc}
 80a041a:	bf00      	nop
 80a041c:	20000300 	.word	0x20000300

080a0420 <_ZN11RGBControls3Led4fadeENS_5ColorES1_i>:
      fade(a, b, duration);
    else
      fade(b, a, duration);
  }

  void Led::fade(Color c1, Color c2, int duration) {
 80a0420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0424:	b08a      	sub	sp, #40	; 0x28
 80a0426:	4606      	mov	r6, r0
    float steps = duration / 25;
 80a0428:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80a042a:	f04f 0819 	mov.w	r8, #25
      fade(a, b, duration);
    else
      fade(b, a, duration);
  }

  void Led::fade(Color c1, Color c2, int duration) {
 80a042e:	ad03      	add	r5, sp, #12
    float steps = duration / 25;
 80a0430:	fb90 f0f8 	sdiv	r0, r0, r8
      fade(a, b, duration);
    else
      fade(b, a, duration);
  }

  void Led::fade(Color c1, Color c2, int duration) {
 80a0434:	e885 000e 	stmia.w	r5, {r1, r2, r3}
    float steps = duration / 25;
 80a0438:	f001 fa74 	bl	80a1924 <__aeabi_i2f>
 80a043c:	4607      	mov	r7, r0
    Color nextColor = c1.lerp(c2, _step / steps);
 80a043e:	6930      	ldr	r0, [r6, #16]
 80a0440:	f001 fa70 	bl	80a1924 <__aeabi_i2f>
 80a0444:	4639      	mov	r1, r7
 80a0446:	f001 fb75 	bl	80a1b34 <__aeabi_fdiv>
 80a044a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80a044c:	9001      	str	r0, [sp, #4]
 80a044e:	9300      	str	r3, [sp, #0]
 80a0450:	ac07      	add	r4, sp, #28
 80a0452:	ab10      	add	r3, sp, #64	; 0x40
 80a0454:	4629      	mov	r1, r5
 80a0456:	cb0c      	ldmia	r3, {r2, r3}
 80a0458:	4620      	mov	r0, r4
 80a045a:	f7ff ff51 	bl	80a0300 <_ZN11RGBControls5Color4lerpES0_f>
    setColor(nextColor);
 80a045e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80a0462:	4630      	mov	r0, r6
 80a0464:	f7ff ff93 	bl	80a038e <_ZN11RGBControls3Led8setColorENS_5ColorE>
    delay(25);
 80a0468:	4640      	mov	r0, r8
 80a046a:	f000 f9df 	bl	80a082c <delay>
    step(0, steps);
 80a046e:	4638      	mov	r0, r7
 80a0470:	f001 fc72 	bl	80a1d58 <__aeabi_f2iz>
 80a0474:	2100      	movs	r1, #0
 80a0476:	4602      	mov	r2, r0
 80a0478:	4630      	mov	r0, r6
 80a047a:	f7ff ffbb 	bl	80a03f4 <_ZN11RGBControls3Led4stepEii>
  }
 80a047e:	b00a      	add	sp, #40	; 0x28
 80a0480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0484 <_ZN11RGBControls3Led4fadeEPNS_5ColorEii>:
    }
  }

  int n = 0;
  bool up = false;
  void Led::fade(Color* colors, int length, int duration) {
 80a0484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float steps = duration / 25;
    if (_step == 0 || _step == steps) {
 80a0488:	f8d0 a010 	ldr.w	sl, [r0, #16]
    }
  }

  int n = 0;
  bool up = false;
  void Led::fade(Color* colors, int length, int duration) {
 80a048c:	b08b      	sub	sp, #44	; 0x2c
 80a048e:	4605      	mov	r5, r0
 80a0490:	4688      	mov	r8, r1
 80a0492:	4691      	mov	r9, r2
 80a0494:	461e      	mov	r6, r3
 80a0496:	4c29      	ldr	r4, [pc, #164]	; (80a053c <_ZN11RGBControls3Led4fadeEPNS_5ColorEii+0xb8>)
 80a0498:	4f29      	ldr	r7, [pc, #164]	; (80a0540 <_ZN11RGBControls3Led4fadeEPNS_5ColorEii+0xbc>)
    float steps = duration / 25;
    if (_step == 0 || _step == steps) {
 80a049a:	f1ba 0f00 	cmp.w	sl, #0
 80a049e:	d00d      	beq.n	80a04bc <_ZN11RGBControls3Led4fadeEPNS_5ColorEii+0x38>
 80a04a0:	2019      	movs	r0, #25
 80a04a2:	fb93 f0f0 	sdiv	r0, r3, r0
 80a04a6:	f001 fa3d 	bl	80a1924 <__aeabi_i2f>
 80a04aa:	4683      	mov	fp, r0
 80a04ac:	4650      	mov	r0, sl
 80a04ae:	f001 fa39 	bl	80a1924 <__aeabi_i2f>
 80a04b2:	4601      	mov	r1, r0
 80a04b4:	4658      	mov	r0, fp
 80a04b6:	f001 fc1d 	bl	80a1cf4 <__aeabi_fcmpeq>
 80a04ba:	b168      	cbz	r0, 80a04d8 <_ZN11RGBControls3Led4fadeEPNS_5ColorEii+0x54>
      n++;
 80a04bc:	6823      	ldr	r3, [r4, #0]
 80a04be:	4a1f      	ldr	r2, [pc, #124]	; (80a053c <_ZN11RGBControls3Led4fadeEPNS_5ColorEii+0xb8>)
 80a04c0:	3301      	adds	r3, #1
      if (n >= length) {
 80a04c2:	454b      	cmp	r3, r9
 80a04c4:	da01      	bge.n	80a04ca <_ZN11RGBControls3Led4fadeEPNS_5ColorEii+0x46>
  int n = 0;
  bool up = false;
  void Led::fade(Color* colors, int length, int duration) {
    float steps = duration / 25;
    if (_step == 0 || _step == steps) {
      n++;
 80a04c6:	6013      	str	r3, [r2, #0]
 80a04c8:	e006      	b.n	80a04d8 <_ZN11RGBControls3Led4fadeEPNS_5ColorEii+0x54>
      if (n >= length) {
        n = 0;
 80a04ca:	2300      	movs	r3, #0
 80a04cc:	6013      	str	r3, [r2, #0]
        up = !up && (length % 2 != 0);
 80a04ce:	783a      	ldrb	r2, [r7, #0]
 80a04d0:	b90a      	cbnz	r2, 80a04d6 <_ZN11RGBControls3Led4fadeEPNS_5ColorEii+0x52>
 80a04d2:	f009 0301 	and.w	r3, r9, #1
 80a04d6:	703b      	strb	r3, [r7, #0]
      }
    }
    Color a = colors[n];
 80a04d8:	6823      	ldr	r3, [r4, #0]
 80a04da:	240c      	movs	r4, #12
 80a04dc:	435c      	muls	r4, r3
 80a04de:	f10d 0e10 	add.w	lr, sp, #16
 80a04e2:	eb08 0204 	add.w	r2, r8, r4
 80a04e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80a04e8:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    Color b = colors[(n + 1 == length) ? 0 : n + 1];
 80a04ec:	1c5a      	adds	r2, r3, #1
 80a04ee:	4591      	cmp	r9, r2
 80a04f0:	bf14      	ite	ne
 80a04f2:	f104 010c 	addne.w	r1, r4, #12
 80a04f6:	2100      	moveq	r1, #0
 80a04f8:	ac07      	add	r4, sp, #28
 80a04fa:	4441      	add	r1, r8
 80a04fc:	c907      	ldmia	r1, {r0, r1, r2}
 80a04fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if ((n % 2 == 0) ^ up)
 80a0502:	f003 0301 	and.w	r3, r3, #1
 80a0506:	783a      	ldrb	r2, [r7, #0]
 80a0508:	f083 0301 	eor.w	r3, r3, #1
 80a050c:	429a      	cmp	r2, r3
      fade(a, b, duration);
 80a050e:	9603      	str	r6, [sp, #12]
 80a0510:	bf15      	itete	ne
 80a0512:	e894 0007 	ldmiane.w	r4, {r0, r1, r2}
    else
      fade(b, a, duration);
 80a0516:	e89e 0007 	ldmiaeq.w	lr, {r0, r1, r2}
      }
    }
    Color a = colors[n];
    Color b = colors[(n + 1 == length) ? 0 : n + 1];
    if ((n % 2 == 0) ^ up)
      fade(a, b, duration);
 80a051a:	e88d 0007 	stmiane.w	sp, {r0, r1, r2}
    else
      fade(b, a, duration);
 80a051e:	e88d 0007 	stmiaeq.w	sp, {r0, r1, r2}
      }
    }
    Color a = colors[n];
    Color b = colors[(n + 1 == length) ? 0 : n + 1];
    if ((n % 2 == 0) ^ up)
      fade(a, b, duration);
 80a0522:	bf18      	it	ne
 80a0524:	e89e 000e 	ldmiane.w	lr, {r1, r2, r3}
    else
      fade(b, a, duration);
 80a0528:	4628      	mov	r0, r5
 80a052a:	bf08      	it	eq
 80a052c:	e894 000e 	ldmiaeq.w	r4, {r1, r2, r3}
 80a0530:	f7ff ff76 	bl	80a0420 <_ZN11RGBControls3Led4fadeENS_5ColorES1_i>
  }
 80a0534:	b00b      	add	sp, #44	; 0x2c
 80a0536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a053a:	bf00      	nop
 80a053c:	200003d8 	.word	0x200003d8
 80a0540:	200003dc 	.word	0x200003dc

080a0544 <_GLOBAL__sub_I__ZN11RGBControls5ColorC2Eiii>:
 80a0544:	f000 b818 	b.w	80a0578 <HAL_Pin_Map>

080a0548 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0548:	b508      	push	{r3, lr}
 80a054a:	4b02      	ldr	r3, [pc, #8]	; (80a0554 <os_mutex_create+0xc>)
 80a054c:	681b      	ldr	r3, [r3, #0]
 80a054e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0550:	9301      	str	r3, [sp, #4]
 80a0552:	bd08      	pop	{r3, pc}
 80a0554:	080601d0 	.word	0x080601d0

080a0558 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0558:	b508      	push	{r3, lr}
 80a055a:	4b02      	ldr	r3, [pc, #8]	; (80a0564 <HAL_RNG_GetRandomNumber+0xc>)
 80a055c:	681b      	ldr	r3, [r3, #0]
 80a055e:	685b      	ldr	r3, [r3, #4]
 80a0560:	9301      	str	r3, [sp, #4]
 80a0562:	bd08      	pop	{r3, pc}
 80a0564:	0806019c 	.word	0x0806019c

080a0568 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0568:	b508      	push	{r3, lr}
 80a056a:	4b02      	ldr	r3, [pc, #8]	; (80a0574 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a056c:	681b      	ldr	r3, [r3, #0]
 80a056e:	695b      	ldr	r3, [r3, #20]
 80a0570:	9301      	str	r3, [sp, #4]
 80a0572:	bd08      	pop	{r3, pc}
 80a0574:	0806019c 	.word	0x0806019c

080a0578 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a0578:	b508      	push	{r3, lr}
 80a057a:	4b02      	ldr	r3, [pc, #8]	; (80a0584 <HAL_Pin_Map+0xc>)
 80a057c:	681b      	ldr	r3, [r3, #0]
 80a057e:	681b      	ldr	r3, [r3, #0]
 80a0580:	9301      	str	r3, [sp, #4]
 80a0582:	bd08      	pop	{r3, pc}
 80a0584:	080601b0 	.word	0x080601b0

080a0588 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a0588:	b508      	push	{r3, lr}
 80a058a:	4b02      	ldr	r3, [pc, #8]	; (80a0594 <HAL_Validate_Pin_Function+0xc>)
 80a058c:	681b      	ldr	r3, [r3, #0]
 80a058e:	685b      	ldr	r3, [r3, #4]
 80a0590:	9301      	str	r3, [sp, #4]
 80a0592:	bd08      	pop	{r3, pc}
 80a0594:	080601b0 	.word	0x080601b0

080a0598 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0598:	b508      	push	{r3, lr}
 80a059a:	4b02      	ldr	r3, [pc, #8]	; (80a05a4 <HAL_Pin_Mode+0xc>)
 80a059c:	681b      	ldr	r3, [r3, #0]
 80a059e:	689b      	ldr	r3, [r3, #8]
 80a05a0:	9301      	str	r3, [sp, #4]
 80a05a2:	bd08      	pop	{r3, pc}
 80a05a4:	080601b0 	.word	0x080601b0

080a05a8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a05a8:	b508      	push	{r3, lr}
 80a05aa:	4b02      	ldr	r3, [pc, #8]	; (80a05b4 <HAL_Get_Pin_Mode+0xc>)
 80a05ac:	681b      	ldr	r3, [r3, #0]
 80a05ae:	68db      	ldr	r3, [r3, #12]
 80a05b0:	9301      	str	r3, [sp, #4]
 80a05b2:	bd08      	pop	{r3, pc}
 80a05b4:	080601b0 	.word	0x080601b0

080a05b8 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 80a05b8:	b508      	push	{r3, lr}
 80a05ba:	4b02      	ldr	r3, [pc, #8]	; (80a05c4 <HAL_DAC_Write+0xc>)
 80a05bc:	681b      	ldr	r3, [r3, #0]
 80a05be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a05c0:	9301      	str	r3, [sp, #4]
 80a05c2:	bd08      	pop	{r3, pc}
 80a05c4:	080601b0 	.word	0x080601b0

080a05c8 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
 80a05c8:	b508      	push	{r3, lr}
 80a05ca:	4b02      	ldr	r3, [pc, #8]	; (80a05d4 <HAL_PWM_Write_Ext+0xc>)
 80a05cc:	681b      	ldr	r3, [r3, #0]
 80a05ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80a05d0:	9301      	str	r3, [sp, #4]
 80a05d2:	bd08      	pop	{r3, pc}
 80a05d4:	080601b0 	.word	0x080601b0

080a05d8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a05d8:	b508      	push	{r3, lr}
 80a05da:	4b02      	ldr	r3, [pc, #8]	; (80a05e4 <HAL_I2C_Write_Data+0xc>)
 80a05dc:	681b      	ldr	r3, [r3, #0]
 80a05de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a05e0:	9301      	str	r3, [sp, #4]
 80a05e2:	bd08      	pop	{r3, pc}
 80a05e4:	080601ac 	.word	0x080601ac

080a05e8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a05e8:	b508      	push	{r3, lr}
 80a05ea:	4b02      	ldr	r3, [pc, #8]	; (80a05f4 <HAL_I2C_Available_Data+0xc>)
 80a05ec:	681b      	ldr	r3, [r3, #0]
 80a05ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a05f0:	9301      	str	r3, [sp, #4]
 80a05f2:	bd08      	pop	{r3, pc}
 80a05f4:	080601ac 	.word	0x080601ac

080a05f8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a05f8:	b508      	push	{r3, lr}
 80a05fa:	4b02      	ldr	r3, [pc, #8]	; (80a0604 <HAL_I2C_Read_Data+0xc>)
 80a05fc:	681b      	ldr	r3, [r3, #0]
 80a05fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0600:	9301      	str	r3, [sp, #4]
 80a0602:	bd08      	pop	{r3, pc}
 80a0604:	080601ac 	.word	0x080601ac

080a0608 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0608:	b508      	push	{r3, lr}
 80a060a:	4b02      	ldr	r3, [pc, #8]	; (80a0614 <HAL_I2C_Peek_Data+0xc>)
 80a060c:	681b      	ldr	r3, [r3, #0]
 80a060e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0610:	9301      	str	r3, [sp, #4]
 80a0612:	bd08      	pop	{r3, pc}
 80a0614:	080601ac 	.word	0x080601ac

080a0618 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0618:	b508      	push	{r3, lr}
 80a061a:	4b02      	ldr	r3, [pc, #8]	; (80a0624 <HAL_I2C_Flush_Data+0xc>)
 80a061c:	681b      	ldr	r3, [r3, #0]
 80a061e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0620:	9301      	str	r3, [sp, #4]
 80a0622:	bd08      	pop	{r3, pc}
 80a0624:	080601ac 	.word	0x080601ac

080a0628 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0628:	b508      	push	{r3, lr}
 80a062a:	4b02      	ldr	r3, [pc, #8]	; (80a0634 <HAL_I2C_Is_Enabled+0xc>)
 80a062c:	681b      	ldr	r3, [r3, #0]
 80a062e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0630:	9301      	str	r3, [sp, #4]
 80a0632:	bd08      	pop	{r3, pc}
 80a0634:	080601ac 	.word	0x080601ac

080a0638 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0638:	b508      	push	{r3, lr}
 80a063a:	4b03      	ldr	r3, [pc, #12]	; (80a0648 <HAL_I2C_Init+0x10>)
 80a063c:	681b      	ldr	r3, [r3, #0]
 80a063e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0642:	9301      	str	r3, [sp, #4]
 80a0644:	bd08      	pop	{r3, pc}
 80a0646:	0000      	.short	0x0000
 80a0648:	080601ac 	.word	0x080601ac

080a064c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a064c:	b508      	push	{r3, lr}
 80a064e:	4b02      	ldr	r3, [pc, #8]	; (80a0658 <HAL_SPI_Init+0xc>)
 80a0650:	681b      	ldr	r3, [r3, #0]
 80a0652:	69db      	ldr	r3, [r3, #28]
 80a0654:	9301      	str	r3, [sp, #4]
 80a0656:	bd08      	pop	{r3, pc}
 80a0658:	080601b4 	.word	0x080601b4

080a065c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a065c:	b508      	push	{r3, lr}
 80a065e:	4b02      	ldr	r3, [pc, #8]	; (80a0668 <HAL_SPI_Is_Enabled+0xc>)
 80a0660:	681b      	ldr	r3, [r3, #0]
 80a0662:	6a1b      	ldr	r3, [r3, #32]
 80a0664:	9301      	str	r3, [sp, #4]
 80a0666:	bd08      	pop	{r3, pc}
 80a0668:	080601b4 	.word	0x080601b4

080a066c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a066c:	b508      	push	{r3, lr}
 80a066e:	4b02      	ldr	r3, [pc, #8]	; (80a0678 <HAL_USART_Init+0xc>)
 80a0670:	681b      	ldr	r3, [r3, #0]
 80a0672:	699b      	ldr	r3, [r3, #24]
 80a0674:	9301      	str	r3, [sp, #4]
 80a0676:	bd08      	pop	{r3, pc}
 80a0678:	080601c4 	.word	0x080601c4

080a067c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a067c:	b508      	push	{r3, lr}
 80a067e:	4b02      	ldr	r3, [pc, #8]	; (80a0688 <HAL_USART_Write_Data+0xc>)
 80a0680:	681b      	ldr	r3, [r3, #0]
 80a0682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0684:	9301      	str	r3, [sp, #4]
 80a0686:	bd08      	pop	{r3, pc}
 80a0688:	080601c4 	.word	0x080601c4

080a068c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a068c:	b508      	push	{r3, lr}
 80a068e:	4b02      	ldr	r3, [pc, #8]	; (80a0698 <HAL_USART_Available_Data+0xc>)
 80a0690:	681b      	ldr	r3, [r3, #0]
 80a0692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0694:	9301      	str	r3, [sp, #4]
 80a0696:	bd08      	pop	{r3, pc}
 80a0698:	080601c4 	.word	0x080601c4

080a069c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a069c:	b508      	push	{r3, lr}
 80a069e:	4b02      	ldr	r3, [pc, #8]	; (80a06a8 <HAL_USART_Read_Data+0xc>)
 80a06a0:	681b      	ldr	r3, [r3, #0]
 80a06a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a06a4:	9301      	str	r3, [sp, #4]
 80a06a6:	bd08      	pop	{r3, pc}
 80a06a8:	080601c4 	.word	0x080601c4

080a06ac <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a06ac:	b508      	push	{r3, lr}
 80a06ae:	4b02      	ldr	r3, [pc, #8]	; (80a06b8 <HAL_USART_Peek_Data+0xc>)
 80a06b0:	681b      	ldr	r3, [r3, #0]
 80a06b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a06b4:	9301      	str	r3, [sp, #4]
 80a06b6:	bd08      	pop	{r3, pc}
 80a06b8:	080601c4 	.word	0x080601c4

080a06bc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a06bc:	b508      	push	{r3, lr}
 80a06be:	4b02      	ldr	r3, [pc, #8]	; (80a06c8 <HAL_USART_Flush_Data+0xc>)
 80a06c0:	681b      	ldr	r3, [r3, #0]
 80a06c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a06c4:	9301      	str	r3, [sp, #4]
 80a06c6:	bd08      	pop	{r3, pc}
 80a06c8:	080601c4 	.word	0x080601c4

080a06cc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a06cc:	b508      	push	{r3, lr}
 80a06ce:	4b02      	ldr	r3, [pc, #8]	; (80a06d8 <HAL_USART_Is_Enabled+0xc>)
 80a06d0:	681b      	ldr	r3, [r3, #0]
 80a06d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a06d4:	9301      	str	r3, [sp, #4]
 80a06d6:	bd08      	pop	{r3, pc}
 80a06d8:	080601c4 	.word	0x080601c4

080a06dc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a06dc:	b508      	push	{r3, lr}
 80a06de:	4b02      	ldr	r3, [pc, #8]	; (80a06e8 <HAL_USART_Available_Data_For_Write+0xc>)
 80a06e0:	681b      	ldr	r3, [r3, #0]
 80a06e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a06e4:	9301      	str	r3, [sp, #4]
 80a06e6:	bd08      	pop	{r3, pc}
 80a06e8:	080601c4 	.word	0x080601c4

080a06ec <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a06ec:	b508      	push	{r3, lr}
 80a06ee:	4b02      	ldr	r3, [pc, #8]	; (80a06f8 <HAL_USB_USART_Init+0xc>)
 80a06f0:	681b      	ldr	r3, [r3, #0]
 80a06f2:	681b      	ldr	r3, [r3, #0]
 80a06f4:	9301      	str	r3, [sp, #4]
 80a06f6:	bd08      	pop	{r3, pc}
 80a06f8:	080601d8 	.word	0x080601d8

080a06fc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a06fc:	b508      	push	{r3, lr}
 80a06fe:	4b02      	ldr	r3, [pc, #8]	; (80a0708 <HAL_USB_USART_Available_Data+0xc>)
 80a0700:	681b      	ldr	r3, [r3, #0]
 80a0702:	691b      	ldr	r3, [r3, #16]
 80a0704:	9301      	str	r3, [sp, #4]
 80a0706:	bd08      	pop	{r3, pc}
 80a0708:	080601d8 	.word	0x080601d8

080a070c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a070c:	b508      	push	{r3, lr}
 80a070e:	4b02      	ldr	r3, [pc, #8]	; (80a0718 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0710:	681b      	ldr	r3, [r3, #0]
 80a0712:	695b      	ldr	r3, [r3, #20]
 80a0714:	9301      	str	r3, [sp, #4]
 80a0716:	bd08      	pop	{r3, pc}
 80a0718:	080601d8 	.word	0x080601d8

080a071c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a071c:	b508      	push	{r3, lr}
 80a071e:	4b02      	ldr	r3, [pc, #8]	; (80a0728 <HAL_USB_USART_Receive_Data+0xc>)
 80a0720:	681b      	ldr	r3, [r3, #0]
 80a0722:	699b      	ldr	r3, [r3, #24]
 80a0724:	9301      	str	r3, [sp, #4]
 80a0726:	bd08      	pop	{r3, pc}
 80a0728:	080601d8 	.word	0x080601d8

080a072c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a072c:	b508      	push	{r3, lr}
 80a072e:	4b02      	ldr	r3, [pc, #8]	; (80a0738 <HAL_USB_USART_Send_Data+0xc>)
 80a0730:	681b      	ldr	r3, [r3, #0]
 80a0732:	69db      	ldr	r3, [r3, #28]
 80a0734:	9301      	str	r3, [sp, #4]
 80a0736:	bd08      	pop	{r3, pc}
 80a0738:	080601d8 	.word	0x080601d8

080a073c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a073c:	b508      	push	{r3, lr}
 80a073e:	4b02      	ldr	r3, [pc, #8]	; (80a0748 <HAL_USB_USART_Flush_Data+0xc>)
 80a0740:	681b      	ldr	r3, [r3, #0]
 80a0742:	6a1b      	ldr	r3, [r3, #32]
 80a0744:	9301      	str	r3, [sp, #4]
 80a0746:	bd08      	pop	{r3, pc}
 80a0748:	080601d8 	.word	0x080601d8

080a074c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a074c:	b508      	push	{r3, lr}
 80a074e:	4b02      	ldr	r3, [pc, #8]	; (80a0758 <set_system_mode+0xc>)
 80a0750:	681b      	ldr	r3, [r3, #0]
 80a0752:	685b      	ldr	r3, [r3, #4]
 80a0754:	9301      	str	r3, [sp, #4]
 80a0756:	bd08      	pop	{r3, pc}
 80a0758:	080601a4 	.word	0x080601a4

080a075c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a075c:	b508      	push	{r3, lr}
 80a075e:	4b02      	ldr	r3, [pc, #8]	; (80a0768 <system_delay_ms+0xc>)
 80a0760:	681b      	ldr	r3, [r3, #0]
 80a0762:	695b      	ldr	r3, [r3, #20]
 80a0764:	9301      	str	r3, [sp, #4]
 80a0766:	bd08      	pop	{r3, pc}
 80a0768:	080601a4 	.word	0x080601a4

080a076c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a076c:	b508      	push	{r3, lr}
 80a076e:	4b02      	ldr	r3, [pc, #8]	; (80a0778 <application_thread_current+0xc>)
 80a0770:	681b      	ldr	r3, [r3, #0]
 80a0772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0774:	9301      	str	r3, [sp, #4]
 80a0776:	bd08      	pop	{r3, pc}
 80a0778:	080601a4 	.word	0x080601a4

080a077c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a077c:	b508      	push	{r3, lr}
 80a077e:	4b02      	ldr	r3, [pc, #8]	; (80a0788 <application_thread_invoke+0xc>)
 80a0780:	681b      	ldr	r3, [r3, #0]
 80a0782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0784:	9301      	str	r3, [sp, #4]
 80a0786:	bd08      	pop	{r3, pc}
 80a0788:	080601a4 	.word	0x080601a4

080a078c <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 80a078c:	b508      	push	{r3, lr}
 80a078e:	4b02      	ldr	r3, [pc, #8]	; (80a0798 <system_set_usb_request_app_handler+0xc>)
 80a0790:	681b      	ldr	r3, [r3, #0]
 80a0792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0794:	9301      	str	r3, [sp, #4]
 80a0796:	bd08      	pop	{r3, pc}
 80a0798:	080601a4 	.word	0x080601a4

080a079c <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 80a079c:	b508      	push	{r3, lr}
 80a079e:	4b02      	ldr	r3, [pc, #8]	; (80a07a8 <system_set_usb_request_result+0xc>)
 80a07a0:	681b      	ldr	r3, [r3, #0]
 80a07a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a07a4:	9301      	str	r3, [sp, #4]
 80a07a6:	bd08      	pop	{r3, pc}
 80a07a8:	080601a4 	.word	0x080601a4

080a07ac <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a07ac:	b508      	push	{r3, lr}
 80a07ae:	4b02      	ldr	r3, [pc, #8]	; (80a07b8 <spark_variable+0xc>)
 80a07b0:	681b      	ldr	r3, [r3, #0]
 80a07b2:	681b      	ldr	r3, [r3, #0]
 80a07b4:	9301      	str	r3, [sp, #4]
 80a07b6:	bd08      	pop	{r3, pc}
 80a07b8:	080601cc 	.word	0x080601cc

080a07bc <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a07bc:	b508      	push	{r3, lr}
 80a07be:	4b02      	ldr	r3, [pc, #8]	; (80a07c8 <spark_send_event+0xc>)
 80a07c0:	681b      	ldr	r3, [r3, #0]
 80a07c2:	6a1b      	ldr	r3, [r3, #32]
 80a07c4:	9301      	str	r3, [sp, #4]
 80a07c6:	bd08      	pop	{r3, pc}
 80a07c8:	080601cc 	.word	0x080601cc

080a07cc <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a07cc:	b508      	push	{r3, lr}
 80a07ce:	4b02      	ldr	r3, [pc, #8]	; (80a07d8 <spark_subscribe+0xc>)
 80a07d0:	681b      	ldr	r3, [r3, #0]
 80a07d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a07d4:	9301      	str	r3, [sp, #4]
 80a07d6:	bd08      	pop	{r3, pc}
 80a07d8:	080601cc 	.word	0x080601cc

080a07dc <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a07dc:	b508      	push	{r3, lr}
 80a07de:	4b02      	ldr	r3, [pc, #8]	; (80a07e8 <network_ready+0xc>)
 80a07e0:	681b      	ldr	r3, [r3, #0]
 80a07e2:	691b      	ldr	r3, [r3, #16]
 80a07e4:	9301      	str	r3, [sp, #4]
 80a07e6:	bd08      	pop	{r3, pc}
 80a07e8:	080601c8 	.word	0x080601c8

080a07ec <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a07ec:	b508      	push	{r3, lr}
 80a07ee:	4b02      	ldr	r3, [pc, #8]	; (80a07f8 <malloc+0xc>)
 80a07f0:	681b      	ldr	r3, [r3, #0]
 80a07f2:	681b      	ldr	r3, [r3, #0]
 80a07f4:	9301      	str	r3, [sp, #4]
 80a07f6:	bd08      	pop	{r3, pc}
 80a07f8:	080601a0 	.word	0x080601a0

080a07fc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a07fc:	b508      	push	{r3, lr}
 80a07fe:	4b02      	ldr	r3, [pc, #8]	; (80a0808 <free+0xc>)
 80a0800:	681b      	ldr	r3, [r3, #0]
 80a0802:	685b      	ldr	r3, [r3, #4]
 80a0804:	9301      	str	r3, [sp, #4]
 80a0806:	bd08      	pop	{r3, pc}
 80a0808:	080601a0 	.word	0x080601a0

080a080c <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a080c:	b508      	push	{r3, lr}
 80a080e:	4b02      	ldr	r3, [pc, #8]	; (80a0818 <abort+0xc>)
 80a0810:	681b      	ldr	r3, [r3, #0]
 80a0812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0814:	9301      	str	r3, [sp, #4]
 80a0816:	bd08      	pop	{r3, pc}
 80a0818:	080601a0 	.word	0x080601a0

080a081c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a081c:	b508      	push	{r3, lr}
 80a081e:	4b02      	ldr	r3, [pc, #8]	; (80a0828 <_malloc_r+0xc>)
 80a0820:	681b      	ldr	r3, [r3, #0]
 80a0822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0824:	9301      	str	r3, [sp, #4]
 80a0826:	bd08      	pop	{r3, pc}
 80a0828:	080601a0 	.word	0x080601a0

080a082c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a082c:	2100      	movs	r1, #0
 80a082e:	f7ff bf95 	b.w	80a075c <system_delay_ms>

080a0832 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a0832:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0834:	6883      	ldr	r3, [r0, #8]
 80a0836:	4604      	mov	r4, r0
 80a0838:	b90b      	cbnz	r3, 80a083e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a083a:	f000 fe6e 	bl	80a151a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a083e:	68c3      	ldr	r3, [r0, #12]
 80a0840:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a0842:	68a3      	ldr	r3, [r4, #8]
 80a0844:	b11b      	cbz	r3, 80a084e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0846:	2203      	movs	r2, #3
 80a0848:	4621      	mov	r1, r4
 80a084a:	4620      	mov	r0, r4
 80a084c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a084e:	4620      	mov	r0, r4
}
 80a0850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a0854:	f7ff bc23 	b.w	80a009e <_ZdlPv>

080a0858 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0858:	4770      	bx	lr

080a085a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a085a:	2000      	movs	r0, #0
 80a085c:	4770      	bx	lr

080a085e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a085e:	b510      	push	{r4, lr}
 80a0860:	4604      	mov	r4, r0
 80a0862:	f7ff fc1c 	bl	80a009e <_ZdlPv>
 80a0866:	4620      	mov	r0, r4
 80a0868:	bd10      	pop	{r4, pc}

080a086a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a086a:	b508      	push	{r3, lr}
      { delete this; }
 80a086c:	b108      	cbz	r0, 80a0872 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a086e:	f7ff fff6 	bl	80a085e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a0872:	bd08      	pop	{r3, pc}

080a0874 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a0874:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a0876:	68c4      	ldr	r4, [r0, #12]
 80a0878:	b1d4      	cbz	r4, 80a08b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a087a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a087c:	2b02      	cmp	r3, #2
 80a087e:	d102      	bne.n	80a0886 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0880:	68e0      	ldr	r0, [r4, #12]
 80a0882:	f7ff ffbb 	bl	80a07fc <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a0886:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a0888:	b12d      	cbz	r5, 80a0896 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a088a:	4628      	mov	r0, r5
 80a088c:	f7ff fc34 	bl	80a00f8 <_ZNSt14_Function_baseD1Ev>
 80a0890:	4628      	mov	r0, r5
 80a0892:	f7ff fc04 	bl	80a009e <_ZdlPv>
 80a0896:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a0898:	b12d      	cbz	r5, 80a08a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 80a089a:	4628      	mov	r0, r5
 80a089c:	f7ff fc2c 	bl	80a00f8 <_ZNSt14_Function_baseD1Ev>
 80a08a0:	4628      	mov	r0, r5
 80a08a2:	f7ff fbfc 	bl	80a009e <_ZdlPv>
 80a08a6:	4620      	mov	r0, r4
 80a08a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a08ac:	f7ff bbf7 	b.w	80a009e <_ZdlPv>
 80a08b0:	bd38      	pop	{r3, r4, r5, pc}

080a08b2 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
 80a08b2:	b507      	push	{r0, r1, r2, lr}
 80a08b4:	e88d 0006 	stmia.w	sp, {r1, r2}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a08b8:	6882      	ldr	r2, [r0, #8]
 80a08ba:	b90a      	cbnz	r2, 80a08c0 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
 80a08bc:	f000 fe2d 	bl	80a151a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a08c0:	68c3      	ldr	r3, [r0, #12]
 80a08c2:	aa01      	add	r2, sp, #4
 80a08c4:	4669      	mov	r1, sp
 80a08c6:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
 80a08c8:	b003      	add	sp, #12
 80a08ca:	f85d fb04 	ldr.w	pc, [sp], #4

080a08ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a08ce:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a08d0:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a08d2:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a08d4:	b17c      	cbz	r4, 80a08f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a08d6:	6863      	ldr	r3, [r4, #4]
 80a08d8:	3b01      	subs	r3, #1
 80a08da:	6063      	str	r3, [r4, #4]
 80a08dc:	b95b      	cbnz	r3, 80a08f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a08de:	6823      	ldr	r3, [r4, #0]
 80a08e0:	4620      	mov	r0, r4
 80a08e2:	689b      	ldr	r3, [r3, #8]
 80a08e4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a08e6:	68a3      	ldr	r3, [r4, #8]
 80a08e8:	3b01      	subs	r3, #1
 80a08ea:	60a3      	str	r3, [r4, #8]
 80a08ec:	b91b      	cbnz	r3, 80a08f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a08ee:	6823      	ldr	r3, [r4, #0]
 80a08f0:	4620      	mov	r0, r4
 80a08f2:	68db      	ldr	r3, [r3, #12]
 80a08f4:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a08f6:	4628      	mov	r0, r5
 80a08f8:	bd38      	pop	{r3, r4, r5, pc}

080a08fa <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a08fa:	b513      	push	{r0, r1, r4, lr}
 80a08fc:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a08fe:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a0902:	2300      	movs	r3, #0
 80a0904:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0906:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0908:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a090a:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a090c:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a090e:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0910:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0912:	f7ff ffdc 	bl	80a08ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0916:	4620      	mov	r0, r4
 80a0918:	b002      	add	sp, #8
 80a091a:	bd10      	pop	{r4, pc}

080a091c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a091c:	680b      	ldr	r3, [r1, #0]
 80a091e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a0920:	b113      	cbz	r3, 80a0928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a0922:	685a      	ldr	r2, [r3, #4]
 80a0924:	3201      	adds	r2, #1
 80a0926:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a0928:	4770      	bx	lr

080a092a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a092a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a092c:	460c      	mov	r4, r1
 80a092e:	4606      	mov	r6, r0
 80a0930:	460f      	mov	r7, r1
 80a0932:	f854 3b04 	ldr.w	r3, [r4], #4
 80a0936:	ad02      	add	r5, sp, #8
 80a0938:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a093c:	4621      	mov	r1, r4
 80a093e:	a801      	add	r0, sp, #4
 80a0940:	f7ff ffec 	bl	80a091c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a0944:	4629      	mov	r1, r5
 80a0946:	4630      	mov	r0, r6
 80a0948:	f7ff ffd7 	bl	80a08fa <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a094c:	a801      	add	r0, sp, #4
 80a094e:	f7ff ffbe 	bl	80a08ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0952:	4620      	mov	r0, r4
 80a0954:	f7ff ffbb 	bl	80a08ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a0958:	4638      	mov	r0, r7
 80a095a:	f7ff fba0 	bl	80a009e <_ZdlPv>
        return p;
    }
 80a095e:	4630      	mov	r0, r6
 80a0960:	b003      	add	sp, #12
 80a0962:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0964 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a0964:	b513      	push	{r0, r1, r4, lr}
 80a0966:	460b      	mov	r3, r1
 80a0968:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a096a:	c803      	ldmia	r0, {r0, r1}
 80a096c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0970:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0974:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0978:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a097c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0980:	b002      	add	sp, #8
 80a0982:	bd10      	pop	{r4, pc}

080a0984 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0984:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0986:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0988:	b90a      	cbnz	r2, 80a098e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a098a:	f000 fdc6 	bl	80a151a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a098e:	68c3      	ldr	r3, [r0, #12]
    }
 80a0990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0994:	4718      	bx	r3

080a0996 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0996:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0998:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a099a:	f100 0110 	add.w	r1, r0, #16
 80a099e:	f7ff fff1 	bl	80a0984 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a09a2:	bd08      	pop	{r3, pc}

080a09a4 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a09a4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a09a6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a09a8:	b90a      	cbnz	r2, 80a09ae <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a09aa:	f000 fdb6 	bl	80a151a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a09ae:	68c3      	ldr	r3, [r0, #12]
    }
 80a09b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a09b4:	4718      	bx	r3

080a09b6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a09b6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a09b8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a09ba:	f100 0110 	add.w	r1, r0, #16
 80a09be:	f7ff fff1 	bl	80a09a4 <_ZNKSt8functionIFvRKbEEclES1_>
 80a09c2:	bd08      	pop	{r3, pc}

080a09c4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a09c4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a09c6:	2300      	movs	r3, #0
 80a09c8:	6083      	str	r3, [r0, #8]
 80a09ca:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a09cc:	4604      	mov	r4, r0
 80a09ce:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a09d0:	b12b      	cbz	r3, 80a09de <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a09d2:	2202      	movs	r2, #2
 80a09d4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a09d6:	68eb      	ldr	r3, [r5, #12]
 80a09d8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a09da:	68ab      	ldr	r3, [r5, #8]
 80a09dc:	60a3      	str	r3, [r4, #8]
	}
    }
 80a09de:	4620      	mov	r0, r4
 80a09e0:	bd38      	pop	{r3, r4, r5, pc}
	...

080a09e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a09e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 80a09e8:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a09ec:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a09ee:	f04f 0002 	mov.w	r0, #2
 80a09f2:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a09f4:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a09f8:	808b      	strh	r3, [r1, #4]
 80a09fa:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a09fc:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a09fe:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0a02:	600b      	str	r3, [r1, #0]
 80a0a04:	e8d4 1f4f 	ldrexb	r1, [r4]
 80a0a08:	4299      	cmp	r1, r3
 80a0a0a:	d103      	bne.n	80a0a14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 80a0a0c:	e8c4 0f45 	strexb	r5, r0, [r4]
 80a0a10:	2d00      	cmp	r5, #0
 80a0a12:	d1f7      	bne.n	80a0a04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a0a14:	d002      	beq.n	80a0a1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 80a0a16:	f88d 1000 	strb.w	r1, [sp]
 80a0a1a:	e06b      	b.n	80a0af4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a0a1c:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0a20:	bf1c      	itt	ne
 80a0a22:	60e7      	strne	r7, [r4, #12]
 80a0a24:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a0a26:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 80a0a2a:	bf18      	it	ne
 80a0a2c:	461f      	movne	r7, r3
 80a0a2e:	2301      	movs	r3, #1
 80a0a30:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a0a32:	f3bf 8f5f 	dmb	sy
 80a0a36:	f104 0308 	add.w	r3, r4, #8
 80a0a3a:	2000      	movs	r0, #0
 80a0a3c:	e853 6f00 	ldrex	r6, [r3]
 80a0a40:	e843 0200 	strex	r2, r0, [r3]
 80a0a44:	2a00      	cmp	r2, #0
 80a0a46:	d1f9      	bne.n	80a0a3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 80a0a48:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0a4c:	2e00      	cmp	r6, #0
 80a0a4e:	d051      	beq.n	80a0af4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0a50:	f7ff fe8c 	bl	80a076c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0a54:	b120      	cbz	r0, 80a0a60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0a56:	4629      	mov	r1, r5
 80a0a58:	4630      	mov	r0, r6
 80a0a5a:	f7ff ff93 	bl	80a0984 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0a5e:	e043      	b.n	80a0ae8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0a60:	4631      	mov	r1, r6
 80a0a62:	4668      	mov	r0, sp
 80a0a64:	f7ff ffae 	bl	80a09c4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0a68:	68e0      	ldr	r0, [r4, #12]
 80a0a6a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0a6e:	b108      	cbz	r0, 80a0a74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 80a0a70:	f001 f9ba 	bl	80a1de8 <strdup>
 80a0a74:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0a76:	2010      	movs	r0, #16
 80a0a78:	f8ad 5014 	strh.w	r5, [sp, #20]
 80a0a7c:	f7ff fb0d 	bl	80a009a <_Znwj>
 80a0a80:	4605      	mov	r5, r0
 80a0a82:	b330      	cbz	r0, 80a0ad2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0a84:	f04f 0800 	mov.w	r8, #0
 80a0a88:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0a8c:	2018      	movs	r0, #24
 80a0a8e:	f7ff fb04 	bl	80a009a <_Znwj>
 80a0a92:	4604      	mov	r4, r0
 80a0a94:	b1c0      	cbz	r0, 80a0ac8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0a96:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0a9a:	4601      	mov	r1, r0
 80a0a9c:	4668      	mov	r0, sp
 80a0a9e:	f7ff ff61 	bl	80a0964 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0aa2:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a0aa4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0aa6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0aa8:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a0aaa:	9202      	str	r2, [sp, #8]
 80a0aac:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0aae:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0ab0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80a0ab4:	9203      	str	r2, [sp, #12]
 80a0ab6:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0ab8:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a0abc:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0ac0:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0ac2:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0ac6:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0ac8:	4b0d      	ldr	r3, [pc, #52]	; (80a0b00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0aca:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0acc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0ace:	4b0d      	ldr	r3, [pc, #52]	; (80a0b04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 80a0ad0:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0ad2:	9804      	ldr	r0, [sp, #16]
 80a0ad4:	f7ff fe92 	bl	80a07fc <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0ad8:	4668      	mov	r0, sp
 80a0ada:	f7ff fb0d 	bl	80a00f8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0ade:	2200      	movs	r2, #0
 80a0ae0:	4629      	mov	r1, r5
 80a0ae2:	4809      	ldr	r0, [pc, #36]	; (80a0b08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 80a0ae4:	f7ff fe4a 	bl	80a077c <application_thread_invoke>
 80a0ae8:	4630      	mov	r0, r6
 80a0aea:	f7ff fb05 	bl	80a00f8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a0aee:	4630      	mov	r0, r6
 80a0af0:	f7ff fad5 	bl	80a009e <_ZdlPv>
 80a0af4:	4638      	mov	r0, r7
 80a0af6:	f7ff fe81 	bl	80a07fc <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 80a0afa:	b006      	add	sp, #24
 80a0afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0b00:	080a0997 	.word	0x080a0997
 80a0b04:	080a0bf5 	.word	0x080a0bf5
 80a0b08:	080a0833 	.word	0x080a0833

080a0b0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0b10:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0b12:	ad07      	add	r5, sp, #28
 80a0b14:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0b18:	4606      	mov	r6, r0
 80a0b1a:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a0b1c:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0b1e:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0b20:	460f      	mov	r7, r1
 80a0b22:	4690      	mov	r8, r2
 80a0b24:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0b28:	f8c5 b004 	str.w	fp, [r5, #4]
 80a0b2c:	f8c5 b008 	str.w	fp, [r5, #8]
 80a0b30:	9307      	str	r3, [sp, #28]
 80a0b32:	f7ff fab2 	bl	80a009a <_Znwj>
 80a0b36:	4604      	mov	r4, r0
 80a0b38:	b138      	cbz	r0, 80a0b4a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a0b3a:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0b3e:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0b42:	f8c0 b004 	str.w	fp, [r0, #4]
 80a0b46:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0b4a:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0b4c:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a0b4e:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0b50:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0b52:	f7ff faa2 	bl	80a009a <_Znwj>
 80a0b56:	b128      	cbz	r0, 80a0b64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a0b58:	2301      	movs	r3, #1
 80a0b5a:	6043      	str	r3, [r0, #4]
 80a0b5c:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a0b5e:	4b23      	ldr	r3, [pc, #140]	; (80a0bec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 80a0b60:	60c4      	str	r4, [r0, #12]
 80a0b62:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a0b64:	4b22      	ldr	r3, [pc, #136]	; (80a0bf0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0b66:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a0b68:	2008      	movs	r0, #8
 80a0b6a:	9308      	str	r3, [sp, #32]
 80a0b6c:	f7ff fa95 	bl	80a009a <_Znwj>
 80a0b70:	4604      	mov	r4, r0
 80a0b72:	b128      	cbz	r0, 80a0b80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0b74:	9b03      	ldr	r3, [sp, #12]
 80a0b76:	a904      	add	r1, sp, #16
 80a0b78:	f840 3b04 	str.w	r3, [r0], #4
 80a0b7c:	f7ff fece 	bl	80a091c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0b80:	9500      	str	r5, [sp, #0]
 80a0b82:	fa5f f38a 	uxtb.w	r3, sl
 80a0b86:	464a      	mov	r2, r9
 80a0b88:	4641      	mov	r1, r8
 80a0b8a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a0b8c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0b8e:	f7ff fe15 	bl	80a07bc <spark_send_event>
 80a0b92:	b9b8      	cbnz	r0, 80a0bc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a0b94:	9b03      	ldr	r3, [sp, #12]
 80a0b96:	785b      	ldrb	r3, [r3, #1]
 80a0b98:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a0b9c:	b993      	cbnz	r3, 80a0bc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0b9e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a0ba2:	a905      	add	r1, sp, #20
 80a0ba4:	a803      	add	r0, sp, #12
 80a0ba6:	9205      	str	r2, [sp, #20]
 80a0ba8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0bac:	f7ff ff1a 	bl	80a09e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0bb0:	9805      	ldr	r0, [sp, #20]
 80a0bb2:	f7ff fe23 	bl	80a07fc <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a0bb6:	a805      	add	r0, sp, #20
 80a0bb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0bba:	f7ff feb6 	bl	80a092a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0bbe:	a806      	add	r0, sp, #24
 80a0bc0:	f7ff fe85 	bl	80a08ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0bc4:	9b03      	ldr	r3, [sp, #12]
 80a0bc6:	a904      	add	r1, sp, #16
 80a0bc8:	a806      	add	r0, sp, #24
 80a0bca:	9305      	str	r3, [sp, #20]
 80a0bcc:	f7ff fea6 	bl	80a091c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a0bd0:	a905      	add	r1, sp, #20
 80a0bd2:	4630      	mov	r0, r6
 80a0bd4:	f7ff fe91 	bl	80a08fa <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0bd8:	a806      	add	r0, sp, #24
 80a0bda:	f7ff fe78 	bl	80a08ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0bde:	a804      	add	r0, sp, #16
 80a0be0:	f7ff fe75 	bl	80a08ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a0be4:	4630      	mov	r0, r6
 80a0be6:	b00b      	add	sp, #44	; 0x2c
 80a0be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0bec:	080a1e7c 	.word	0x080a1e7c
 80a0bf0:	080a0d5d 	.word	0x080a0d5d

080a0bf4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0bf4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0bf8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0bfa:	d006      	beq.n	80a0c0a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a0bfc:	2a03      	cmp	r2, #3
 80a0bfe:	d017      	beq.n	80a0c30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a0c00:	2a01      	cmp	r2, #1
 80a0c02:	d120      	bne.n	80a0c46 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0c04:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0c06:	6003      	str	r3, [r0, #0]
	      break;
 80a0c08:	e01d      	b.n	80a0c46 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0c0a:	2018      	movs	r0, #24
 80a0c0c:	680e      	ldr	r6, [r1, #0]
 80a0c0e:	f7ff fa44 	bl	80a009a <_Znwj>
 80a0c12:	4605      	mov	r5, r0
 80a0c14:	b150      	cbz	r0, 80a0c2c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0c16:	4631      	mov	r1, r6
 80a0c18:	f7ff fed4 	bl	80a09c4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0c1c:	6930      	ldr	r0, [r6, #16]
 80a0c1e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0c22:	b108      	cbz	r0, 80a0c28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a0c24:	f001 f8e0 	bl	80a1de8 <strdup>
 80a0c28:	6128      	str	r0, [r5, #16]
 80a0c2a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0c2c:	6025      	str	r5, [r4, #0]
 80a0c2e:	e00a      	b.n	80a0c46 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0c30:	6804      	ldr	r4, [r0, #0]
 80a0c32:	b144      	cbz	r4, 80a0c46 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0c34:	6920      	ldr	r0, [r4, #16]
 80a0c36:	f7ff fde1 	bl	80a07fc <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0c3a:	4620      	mov	r0, r4
 80a0c3c:	f7ff fa5c 	bl	80a00f8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0c40:	4620      	mov	r0, r4
 80a0c42:	f7ff fa2c 	bl	80a009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0c46:	2000      	movs	r0, #0
 80a0c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0c4a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0c4a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0c4c:	2300      	movs	r3, #0
 80a0c4e:	6083      	str	r3, [r0, #8]
 80a0c50:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0c52:	4604      	mov	r4, r0
 80a0c54:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0c56:	b12b      	cbz	r3, 80a0c64 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0c58:	2202      	movs	r2, #2
 80a0c5a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0c5c:	68eb      	ldr	r3, [r5, #12]
 80a0c5e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0c60:	68ab      	ldr	r3, [r5, #8]
 80a0c62:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0c64:	4620      	mov	r0, r4
 80a0c66:	bd38      	pop	{r3, r4, r5, pc}

080a0c68 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0c68:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0c6a:	b570      	push	{r4, r5, r6, lr}
 80a0c6c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0c6e:	d006      	beq.n	80a0c7e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a0c70:	2a03      	cmp	r2, #3
 80a0c72:	d011      	beq.n	80a0c98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a0c74:	2a01      	cmp	r2, #1
 80a0c76:	d117      	bne.n	80a0ca8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0c78:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0c7a:	6003      	str	r3, [r0, #0]
	      break;
 80a0c7c:	e014      	b.n	80a0ca8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0c7e:	2014      	movs	r0, #20
 80a0c80:	680e      	ldr	r6, [r1, #0]
 80a0c82:	f7ff fa0a 	bl	80a009a <_Znwj>
 80a0c86:	4605      	mov	r5, r0
 80a0c88:	b120      	cbz	r0, 80a0c94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0c8a:	4631      	mov	r1, r6
 80a0c8c:	f7ff ffdd 	bl	80a0c4a <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a0c90:	7c33      	ldrb	r3, [r6, #16]
 80a0c92:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0c94:	6025      	str	r5, [r4, #0]
 80a0c96:	e007      	b.n	80a0ca8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0c98:	6804      	ldr	r4, [r0, #0]
 80a0c9a:	b12c      	cbz	r4, 80a0ca8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0c9c:	4620      	mov	r0, r4
 80a0c9e:	f7ff fa2b 	bl	80a00f8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0ca2:	4620      	mov	r0, r4
 80a0ca4:	f7ff f9fb 	bl	80a009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0ca8:	2000      	movs	r0, #0
 80a0caa:	bd70      	pop	{r4, r5, r6, pc}

080a0cac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a0cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0cae:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a0cb0:	f3bf 8f5f 	dmb	sy
 80a0cb4:	b087      	sub	sp, #28
 80a0cb6:	2300      	movs	r3, #0
 80a0cb8:	e850 6f00 	ldrex	r6, [r0]
 80a0cbc:	e840 3200 	strex	r2, r3, [r0]
 80a0cc0:	2a00      	cmp	r2, #0
 80a0cc2:	d1f9      	bne.n	80a0cb8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a0cc4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0cc8:	2e00      	cmp	r6, #0
 80a0cca:	d03e      	beq.n	80a0d4a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0ccc:	4618      	mov	r0, r3
 80a0cce:	f7ff fd4d 	bl	80a076c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0cd2:	4607      	mov	r7, r0
 80a0cd4:	b120      	cbz	r0, 80a0ce0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0cd6:	4621      	mov	r1, r4
 80a0cd8:	4630      	mov	r0, r6
 80a0cda:	f7ff fe63 	bl	80a09a4 <_ZNKSt8functionIFvRKbEEclES1_>
 80a0cde:	e02e      	b.n	80a0d3e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0ce0:	4631      	mov	r1, r6
 80a0ce2:	a801      	add	r0, sp, #4
 80a0ce4:	f7ff ffb1 	bl	80a0c4a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0ce8:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0cea:	2010      	movs	r0, #16
 80a0cec:	f88d 3014 	strb.w	r3, [sp, #20]
 80a0cf0:	f7ff f9d3 	bl	80a009a <_Znwj>
 80a0cf4:	4605      	mov	r5, r0
 80a0cf6:	b1d0      	cbz	r0, 80a0d2e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0cf8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0cfa:	2014      	movs	r0, #20
 80a0cfc:	f7ff f9cd 	bl	80a009a <_Znwj>
 80a0d00:	4604      	mov	r4, r0
 80a0d02:	b178      	cbz	r0, 80a0d24 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0d04:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0d06:	4601      	mov	r1, r0
 80a0d08:	a801      	add	r0, sp, #4
 80a0d0a:	f7ff fe2b 	bl	80a0964 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0d0e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a0d10:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d12:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0d14:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0d16:	9203      	str	r2, [sp, #12]
 80a0d18:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d1a:	60e3      	str	r3, [r4, #12]
 80a0d1c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0d20:	9204      	str	r2, [sp, #16]
 80a0d22:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0d24:	4b0a      	ldr	r3, [pc, #40]	; (80a0d50 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0d26:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0d28:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0d2a:	4b0a      	ldr	r3, [pc, #40]	; (80a0d54 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a0d2c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0d2e:	a801      	add	r0, sp, #4
 80a0d30:	f7ff f9e2 	bl	80a00f8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0d34:	2200      	movs	r2, #0
 80a0d36:	4629      	mov	r1, r5
 80a0d38:	4807      	ldr	r0, [pc, #28]	; (80a0d58 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a0d3a:	f7ff fd1f 	bl	80a077c <application_thread_invoke>
 80a0d3e:	4630      	mov	r0, r6
 80a0d40:	f7ff f9da 	bl	80a00f8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a0d44:	4630      	mov	r0, r6
 80a0d46:	f7ff f9aa 	bl	80a009e <_ZdlPv>
        }
    }
 80a0d4a:	b007      	add	sp, #28
 80a0d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0d4e:	bf00      	nop
 80a0d50:	080a09b7 	.word	0x080a09b7
 80a0d54:	080a0c69 	.word	0x080a0c69
 80a0d58:	080a0833 	.word	0x080a0833

080a0d5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a0d5c:	b530      	push	{r4, r5, lr}
 80a0d5e:	4604      	mov	r4, r0
 80a0d60:	b085      	sub	sp, #20
 80a0d62:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a0d64:	4668      	mov	r0, sp
 80a0d66:	4611      	mov	r1, r2
 80a0d68:	f7ff fddf 	bl	80a092a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a0d6c:	b17c      	cbz	r4, 80a0d8e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a0d6e:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0d70:	4628      	mov	r0, r5
 80a0d72:	b10d      	cbz	r5, 80a0d78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a0d74:	f001 f838 	bl	80a1de8 <strdup>
 80a0d78:	9002      	str	r0, [sp, #8]
 80a0d7a:	a902      	add	r1, sp, #8
 80a0d7c:	4668      	mov	r0, sp
 80a0d7e:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a0d82:	f7ff fe2f 	bl	80a09e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0d86:	9802      	ldr	r0, [sp, #8]
 80a0d88:	f7ff fd38 	bl	80a07fc <free>
 80a0d8c:	e01d      	b.n	80a0dca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a0d8e:	f04f 0201 	mov.w	r2, #1
 80a0d92:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a0d94:	f88d 4008 	strb.w	r4, [sp, #8]
 80a0d98:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a0d9c:	42a3      	cmp	r3, r4
 80a0d9e:	d103      	bne.n	80a0da8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a0da0:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a0da4:	2900      	cmp	r1, #0
 80a0da6:	d1f7      	bne.n	80a0d98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a0da8:	d002      	beq.n	80a0db0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a0daa:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0dae:	e00c      	b.n	80a0dca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a0db0:	f110 010c 	adds.w	r1, r0, #12
 80a0db4:	f04f 0301 	mov.w	r3, #1
 80a0db8:	bf18      	it	ne
 80a0dba:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a0dbc:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a0dc0:	3004      	adds	r0, #4
 80a0dc2:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a0dc6:	f7ff ff71 	bl	80a0cac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a0dca:	a801      	add	r0, sp, #4
 80a0dcc:	f7ff fd7f 	bl	80a08ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a0dd0:	b005      	add	sp, #20
 80a0dd2:	bd30      	pop	{r4, r5, pc}

080a0dd4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0dd4:	4770      	bx	lr

080a0dd6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0dd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0dd8:	4606      	mov	r6, r0
 80a0dda:	4615      	mov	r5, r2
 80a0ddc:	460c      	mov	r4, r1
 80a0dde:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0de0:	42bc      	cmp	r4, r7
 80a0de2:	d006      	beq.n	80a0df2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0de4:	6833      	ldr	r3, [r6, #0]
 80a0de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0dea:	689b      	ldr	r3, [r3, #8]
 80a0dec:	4630      	mov	r0, r6
 80a0dee:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0df0:	e7f6      	b.n	80a0de0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0df2:	4628      	mov	r0, r5
 80a0df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0df6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0df6:	2200      	movs	r2, #0
 80a0df8:	7c00      	ldrb	r0, [r0, #16]
 80a0dfa:	f7ff bbed 	b.w	80a05d8 <HAL_I2C_Write_Data>

080a0dfe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0dfe:	2100      	movs	r1, #0
 80a0e00:	7c00      	ldrb	r0, [r0, #16]
 80a0e02:	f7ff bbf1 	b.w	80a05e8 <HAL_I2C_Available_Data>

080a0e06 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0e06:	2100      	movs	r1, #0
 80a0e08:	7c00      	ldrb	r0, [r0, #16]
 80a0e0a:	f7ff bbf5 	b.w	80a05f8 <HAL_I2C_Read_Data>

080a0e0e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0e0e:	2100      	movs	r1, #0
 80a0e10:	7c00      	ldrb	r0, [r0, #16]
 80a0e12:	f7ff bbf9 	b.w	80a0608 <HAL_I2C_Peek_Data>

080a0e16 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0e16:	2100      	movs	r1, #0
 80a0e18:	7c00      	ldrb	r0, [r0, #16]
 80a0e1a:	f7ff bbfd 	b.w	80a0618 <HAL_I2C_Flush_Data>

080a0e1e <_ZN7TwoWireD0Ev>:
 80a0e1e:	b510      	push	{r4, lr}
 80a0e20:	4604      	mov	r4, r0
 80a0e22:	f7ff f93c 	bl	80a009e <_ZdlPv>
 80a0e26:	4620      	mov	r0, r4
 80a0e28:	bd10      	pop	{r4, pc}
	...

080a0e2c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0e2c:	b510      	push	{r4, lr}
 80a0e2e:	4604      	mov	r4, r0
 80a0e30:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0e36:	60a3      	str	r3, [r4, #8]
 80a0e38:	4b04      	ldr	r3, [pc, #16]	; (80a0e4c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0e3a:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a0e3c:	7420      	strb	r0, [r4, #16]
 80a0e3e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0e40:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a0e42:	f7ff fbf9 	bl	80a0638 <HAL_I2C_Init>

}
 80a0e46:	4620      	mov	r0, r4
 80a0e48:	bd10      	pop	{r4, pc}
 80a0e4a:	bf00      	nop
 80a0e4c:	080a1e98 	.word	0x080a1e98

080a0e50 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0e50:	2100      	movs	r1, #0
 80a0e52:	7c00      	ldrb	r0, [r0, #16]
 80a0e54:	f7ff bbe8 	b.w	80a0628 <HAL_I2C_Is_Enabled>

080a0e58 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0e58:	4770      	bx	lr

080a0e5a <_ZN9IPAddressD0Ev>:
 80a0e5a:	b510      	push	{r4, lr}
 80a0e5c:	4604      	mov	r4, r0
 80a0e5e:	f7ff f91e 	bl	80a009e <_ZdlPv>
 80a0e62:	4620      	mov	r0, r4
 80a0e64:	bd10      	pop	{r4, pc}

080a0e66 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0e68:	460f      	mov	r7, r1
 80a0e6a:	f100 0608 	add.w	r6, r0, #8
 80a0e6e:	1d05      	adds	r5, r0, #4
 80a0e70:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0e72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0e76:	220a      	movs	r2, #10
 80a0e78:	4638      	mov	r0, r7
 80a0e7a:	f000 f882 	bl	80a0f82 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0e7e:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0e80:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0e82:	d007      	beq.n	80a0e94 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0e84:	2c00      	cmp	r4, #0
 80a0e86:	d0f4      	beq.n	80a0e72 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0e88:	212e      	movs	r1, #46	; 0x2e
 80a0e8a:	4638      	mov	r0, r7
 80a0e8c:	f000 f84c 	bl	80a0f28 <_ZN5Print5printEc>
 80a0e90:	4404      	add	r4, r0
 80a0e92:	e7ee      	b.n	80a0e72 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0e94:	4620      	mov	r0, r4
 80a0e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0e98 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0e98:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0e9a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0e9e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0ea2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0ea6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0eaa:	2304      	movs	r3, #4
 80a0eac:	6041      	str	r1, [r0, #4]
 80a0eae:	7503      	strb	r3, [r0, #20]
 80a0eb0:	bd10      	pop	{r4, pc}
	...

080a0eb4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0eb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0eb6:	4d04      	ldr	r5, [pc, #16]	; (80a0ec8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0eb8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0eba:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0ebe:	9500      	str	r5, [sp, #0]
 80a0ec0:	f7ff ffea 	bl	80a0e98 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0ec4:	b003      	add	sp, #12
 80a0ec6:	bd30      	pop	{r4, r5, pc}
 80a0ec8:	080a1ec0 	.word	0x080a1ec0

080a0ecc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0ecc:	4a01      	ldr	r2, [pc, #4]	; (80a0ed4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0ece:	4b02      	ldr	r3, [pc, #8]	; (80a0ed8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0ed0:	601a      	str	r2, [r3, #0]
 80a0ed2:	4770      	bx	lr
 80a0ed4:	080a1f85 	.word	0x080a1f85
 80a0ed8:	200003e0 	.word	0x200003e0

080a0edc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0ede:	4606      	mov	r6, r0
 80a0ee0:	460d      	mov	r5, r1
 80a0ee2:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0ee4:	2400      	movs	r4, #0
  while (size--) {
 80a0ee6:	42bd      	cmp	r5, r7
 80a0ee8:	d00c      	beq.n	80a0f04 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0eea:	6833      	ldr	r3, [r6, #0]
 80a0eec:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0ef0:	689b      	ldr	r3, [r3, #8]
 80a0ef2:	4630      	mov	r0, r6
 80a0ef4:	4798      	blx	r3
     if (chunk>=0)
 80a0ef6:	2800      	cmp	r0, #0
 80a0ef8:	db01      	blt.n	80a0efe <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0efa:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0efc:	e7f3      	b.n	80a0ee6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0efe:	2c00      	cmp	r4, #0
 80a0f00:	bf08      	it	eq
 80a0f02:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0f04:	4620      	mov	r0, r4
 80a0f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0f08 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0f08:	b570      	push	{r4, r5, r6, lr}
 80a0f0a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0f0c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0f0e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0f10:	b149      	cbz	r1, 80a0f26 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0f12:	f000 ff84 	bl	80a1e1e <strlen>
 80a0f16:	682b      	ldr	r3, [r5, #0]
 80a0f18:	4602      	mov	r2, r0
 80a0f1a:	4621      	mov	r1, r4
 80a0f1c:	4628      	mov	r0, r5
    }
 80a0f1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0f22:	68db      	ldr	r3, [r3, #12]
 80a0f24:	4718      	bx	r3
    }
 80a0f26:	bd70      	pop	{r4, r5, r6, pc}

080a0f28 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0f28:	6803      	ldr	r3, [r0, #0]
 80a0f2a:	689b      	ldr	r3, [r3, #8]
 80a0f2c:	4718      	bx	r3

080a0f2e <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0f2e:	2a01      	cmp	r2, #1
 80a0f30:	bf98      	it	ls
 80a0f32:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0f34:	b530      	push	{r4, r5, lr}
 80a0f36:	460b      	mov	r3, r1
 80a0f38:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0f3a:	2100      	movs	r1, #0
 80a0f3c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0f40:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0f44:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0f48:	fb05 3312 	mls	r3, r5, r2, r3
 80a0f4c:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0f4e:	2b09      	cmp	r3, #9
 80a0f50:	bf94      	ite	ls
 80a0f52:	3330      	addls	r3, #48	; 0x30
 80a0f54:	3337      	addhi	r3, #55	; 0x37
 80a0f56:	b2db      	uxtb	r3, r3
 80a0f58:	4621      	mov	r1, r4
 80a0f5a:	f804 3901 	strb.w	r3, [r4], #-1
 80a0f5e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0f60:	2d00      	cmp	r5, #0
 80a0f62:	d1ef      	bne.n	80a0f44 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0f64:	f7ff ffd0 	bl	80a0f08 <_ZN5Print5writeEPKc>
}
 80a0f68:	b00b      	add	sp, #44	; 0x2c
 80a0f6a:	bd30      	pop	{r4, r5, pc}

080a0f6c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0f6c:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0f6e:	b922      	cbnz	r2, 80a0f7a <_ZN5Print5printEmi+0xe>
 80a0f70:	6803      	ldr	r3, [r0, #0]
 80a0f72:	b2c9      	uxtb	r1, r1
 80a0f74:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0f76:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0f78:	4718      	bx	r3
  else return printNumber(n, base);
 80a0f7a:	b2d2      	uxtb	r2, r2
}
 80a0f7c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0f7e:	f7ff bfd6 	b.w	80a0f2e <_ZN5Print11printNumberEmh>

080a0f82 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0f82:	f7ff bff3 	b.w	80a0f6c <_ZN5Print5printEmi>

080a0f86 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0f86:	b510      	push	{r4, lr}
 80a0f88:	4604      	mov	r4, r0
 80a0f8a:	f7ff f8b5 	bl	80a00f8 <_ZNSt14_Function_baseD1Ev>
 80a0f8e:	4620      	mov	r0, r4
 80a0f90:	bd10      	pop	{r4, pc}
	...

080a0f94 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0f94:	4803      	ldr	r0, [pc, #12]	; (80a0fa4 <_GLOBAL__sub_I_RGB+0x10>)
 80a0f96:	2300      	movs	r3, #0
 80a0f98:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0f9a:	4a03      	ldr	r2, [pc, #12]	; (80a0fa8 <_GLOBAL__sub_I_RGB+0x14>)
 80a0f9c:	4903      	ldr	r1, [pc, #12]	; (80a0fac <_GLOBAL__sub_I_RGB+0x18>)
 80a0f9e:	f000 bab7 	b.w	80a1510 <__aeabi_atexit>
 80a0fa2:	bf00      	nop
 80a0fa4:	200003e4 	.word	0x200003e4
 80a0fa8:	2000036c 	.word	0x2000036c
 80a0fac:	080a0f87 	.word	0x080a0f87

080a0fb0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0fb0:	4770      	bx	lr

080a0fb2 <_ZN8SPIClassD0Ev>:
 80a0fb2:	b510      	push	{r4, lr}
 80a0fb4:	4604      	mov	r4, r0
 80a0fb6:	f7ff f872 	bl	80a009e <_ZdlPv>
 80a0fba:	4620      	mov	r0, r4
 80a0fbc:	bd10      	pop	{r4, pc}
	...

080a0fc0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0fc0:	b570      	push	{r4, r5, r6, lr}
 80a0fc2:	4604      	mov	r4, r0
 80a0fc4:	460e      	mov	r6, r1
 80a0fc6:	4b07      	ldr	r3, [pc, #28]	; (80a0fe4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0fc8:	2500      	movs	r5, #0
 80a0fca:	6003      	str	r3, [r0, #0]
 80a0fcc:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0fd0:	f7ff faba 	bl	80a0548 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0fd4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0fd6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0fd8:	f7ff fb38 	bl	80a064c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0fdc:	60a5      	str	r5, [r4, #8]
}
 80a0fde:	4620      	mov	r0, r4
 80a0fe0:	bd70      	pop	{r4, r5, r6, pc}
 80a0fe2:	bf00      	nop
 80a0fe4:	080a1fb8 	.word	0x080a1fb8

080a0fe8 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0fe8:	7900      	ldrb	r0, [r0, #4]
 80a0fea:	f7ff bb37 	b.w	80a065c <HAL_SPI_Is_Enabled>

080a0fee <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0fee:	2000      	movs	r0, #0
 80a0ff0:	f7ff bbac 	b.w	80a074c <set_system_mode>

080a0ff4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0ff4:	4b02      	ldr	r3, [pc, #8]	; (80a1000 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0ff6:	681a      	ldr	r2, [r3, #0]
 80a0ff8:	4b02      	ldr	r3, [pc, #8]	; (80a1004 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0ffa:	601a      	str	r2, [r3, #0]
 80a0ffc:	4770      	bx	lr
 80a0ffe:	bf00      	nop
 80a1000:	20000304 	.word	0x20000304
 80a1004:	200003f4 	.word	0x200003f4

080a1008 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1008:	4770      	bx	lr

080a100a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a100a:	7441      	strb	r1, [r0, #17]
 80a100c:	4770      	bx	lr

080a100e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a100e:	7c00      	ldrb	r0, [r0, #16]
 80a1010:	f7ff bb64 	b.w	80a06dc <HAL_USART_Available_Data_For_Write>

080a1014 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a1014:	7c00      	ldrb	r0, [r0, #16]
 80a1016:	f7ff bb39 	b.w	80a068c <HAL_USART_Available_Data>

080a101a <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a101a:	7c00      	ldrb	r0, [r0, #16]
 80a101c:	f7ff bb46 	b.w	80a06ac <HAL_USART_Peek_Data>

080a1020 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a1020:	7c00      	ldrb	r0, [r0, #16]
 80a1022:	f7ff bb3b 	b.w	80a069c <HAL_USART_Read_Data>

080a1026 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1026:	7c00      	ldrb	r0, [r0, #16]
 80a1028:	f7ff bb48 	b.w	80a06bc <HAL_USART_Flush_Data>

080a102c <_ZN11USARTSerialD0Ev>:
 80a102c:	b510      	push	{r4, lr}
 80a102e:	4604      	mov	r4, r0
 80a1030:	f7ff f835 	bl	80a009e <_ZdlPv>
 80a1034:	4620      	mov	r0, r4
 80a1036:	bd10      	pop	{r4, pc}

080a1038 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1038:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a103a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a103c:	4604      	mov	r4, r0
 80a103e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1040:	b925      	cbnz	r5, 80a104c <_ZN11USARTSerial5writeEh+0x14>
 80a1042:	7c00      	ldrb	r0, [r0, #16]
 80a1044:	f7ff fb4a 	bl	80a06dc <HAL_USART_Available_Data_For_Write>
 80a1048:	2800      	cmp	r0, #0
 80a104a:	dd05      	ble.n	80a1058 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a104c:	4631      	mov	r1, r6
 80a104e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1050:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1054:	f7ff bb12 	b.w	80a067c <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1058:	4628      	mov	r0, r5
 80a105a:	bd70      	pop	{r4, r5, r6, pc}

080a105c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a105c:	b510      	push	{r4, lr}
 80a105e:	4604      	mov	r4, r0
 80a1060:	4608      	mov	r0, r1
 80a1062:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1064:	2200      	movs	r2, #0
 80a1066:	6062      	str	r2, [r4, #4]
 80a1068:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a106c:	60a2      	str	r2, [r4, #8]
 80a106e:	4a05      	ldr	r2, [pc, #20]	; (80a1084 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1070:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1072:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1074:	2201      	movs	r2, #1
 80a1076:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1078:	461a      	mov	r2, r3
 80a107a:	f7ff faf7 	bl	80a066c <HAL_USART_Init>
}
 80a107e:	4620      	mov	r0, r4
 80a1080:	bd10      	pop	{r4, pc}
 80a1082:	bf00      	nop
 80a1084:	080a1ff4 	.word	0x080a1ff4

080a1088 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1088:	7c00      	ldrb	r0, [r0, #16]
 80a108a:	f7ff bb1f 	b.w	80a06cc <HAL_USART_Is_Enabled>
	...

080a1090 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1090:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1092:	4d0c      	ldr	r5, [pc, #48]	; (80a10c4 <_Z22__fetch_global_Serial1v+0x34>)
 80a1094:	6829      	ldr	r1, [r5, #0]
 80a1096:	f011 0401 	ands.w	r4, r1, #1
 80a109a:	d111      	bne.n	80a10c0 <_Z22__fetch_global_Serial1v+0x30>
 80a109c:	4628      	mov	r0, r5
 80a109e:	f7ff f800 	bl	80a00a2 <__cxa_guard_acquire>
 80a10a2:	b168      	cbz	r0, 80a10c0 <_Z22__fetch_global_Serial1v+0x30>
 80a10a4:	4a08      	ldr	r2, [pc, #32]	; (80a10c8 <_Z22__fetch_global_Serial1v+0x38>)
 80a10a6:	4621      	mov	r1, r4
 80a10a8:	4b08      	ldr	r3, [pc, #32]	; (80a10cc <_Z22__fetch_global_Serial1v+0x3c>)
 80a10aa:	4809      	ldr	r0, [pc, #36]	; (80a10d0 <_Z22__fetch_global_Serial1v+0x40>)
 80a10ac:	f7ff ffd6 	bl	80a105c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a10b0:	4628      	mov	r0, r5
 80a10b2:	f7fe fffb 	bl	80a00ac <__cxa_guard_release>
 80a10b6:	4a07      	ldr	r2, [pc, #28]	; (80a10d4 <_Z22__fetch_global_Serial1v+0x44>)
 80a10b8:	4907      	ldr	r1, [pc, #28]	; (80a10d8 <_Z22__fetch_global_Serial1v+0x48>)
 80a10ba:	4805      	ldr	r0, [pc, #20]	; (80a10d0 <_Z22__fetch_global_Serial1v+0x40>)
 80a10bc:	f000 fa28 	bl	80a1510 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a10c0:	4803      	ldr	r0, [pc, #12]	; (80a10d0 <_Z22__fetch_global_Serial1v+0x40>)
 80a10c2:	bd38      	pop	{r3, r4, r5, pc}
 80a10c4:	20000490 	.word	0x20000490
 80a10c8:	20000494 	.word	0x20000494
 80a10cc:	2000040c 	.word	0x2000040c
 80a10d0:	200003f8 	.word	0x200003f8
 80a10d4:	2000036c 	.word	0x2000036c
 80a10d8:	080a1009 	.word	0x080a1009

080a10dc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a10dc:	7441      	strb	r1, [r0, #17]
 80a10de:	4770      	bx	lr

080a10e0 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a10e0:	4770      	bx	lr

080a10e2 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a10e2:	2100      	movs	r1, #0
 80a10e4:	7c00      	ldrb	r0, [r0, #16]
 80a10e6:	f7ff bb19 	b.w	80a071c <HAL_USB_USART_Receive_Data>

080a10ea <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a10ea:	2101      	movs	r1, #1
 80a10ec:	7c00      	ldrb	r0, [r0, #16]
 80a10ee:	f7ff bb15 	b.w	80a071c <HAL_USB_USART_Receive_Data>

080a10f2 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a10f2:	7c00      	ldrb	r0, [r0, #16]
 80a10f4:	f7ff bb0a 	b.w	80a070c <HAL_USB_USART_Available_Data_For_Write>

080a10f8 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a10f8:	7c00      	ldrb	r0, [r0, #16]
 80a10fa:	f7ff baff 	b.w	80a06fc <HAL_USB_USART_Available_Data>

080a10fe <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a10fe:	b538      	push	{r3, r4, r5, lr}
 80a1100:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1102:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a1104:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1106:	f7ff fb01 	bl	80a070c <HAL_USB_USART_Available_Data_For_Write>
 80a110a:	2800      	cmp	r0, #0
 80a110c:	dc01      	bgt.n	80a1112 <_ZN9USBSerial5writeEh+0x14>
 80a110e:	7c60      	ldrb	r0, [r4, #17]
 80a1110:	b120      	cbz	r0, 80a111c <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a1112:	4629      	mov	r1, r5
 80a1114:	7c20      	ldrb	r0, [r4, #16]
 80a1116:	f7ff fb09 	bl	80a072c <HAL_USB_USART_Send_Data>
    return 1;
 80a111a:	2001      	movs	r0, #1
  }
  return 0;
}
 80a111c:	bd38      	pop	{r3, r4, r5, pc}

080a111e <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a111e:	7c00      	ldrb	r0, [r0, #16]
 80a1120:	f7ff bb0c 	b.w	80a073c <HAL_USB_USART_Flush_Data>

080a1124 <_ZN9USBSerialD0Ev>:
 80a1124:	b510      	push	{r4, lr}
 80a1126:	4604      	mov	r4, r0
 80a1128:	f7fe ffb9 	bl	80a009e <_ZdlPv>
 80a112c:	4620      	mov	r0, r4
 80a112e:	bd10      	pop	{r4, pc}

080a1130 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1130:	b510      	push	{r4, lr}
 80a1132:	4604      	mov	r4, r0
 80a1134:	2300      	movs	r3, #0
 80a1136:	6063      	str	r3, [r4, #4]
 80a1138:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a113c:	60a3      	str	r3, [r4, #8]
 80a113e:	4b05      	ldr	r3, [pc, #20]	; (80a1154 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1140:	4608      	mov	r0, r1
 80a1142:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1144:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1146:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1148:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a114a:	4611      	mov	r1, r2
 80a114c:	f7ff face 	bl	80a06ec <HAL_USB_USART_Init>
}
 80a1150:	4620      	mov	r0, r4
 80a1152:	bd10      	pop	{r4, pc}
 80a1154:	080a2024 	.word	0x080a2024

080a1158 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1158:	b510      	push	{r4, lr}
 80a115a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a115c:	2214      	movs	r2, #20
 80a115e:	2100      	movs	r1, #0
 80a1160:	f000 fe39 	bl	80a1dd6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1164:	4b05      	ldr	r3, [pc, #20]	; (80a117c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1166:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1168:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a116a:	4b05      	ldr	r3, [pc, #20]	; (80a1180 <_Z19acquireSerialBufferv+0x28>)
 80a116c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a116e:	f240 1301 	movw	r3, #257	; 0x101
 80a1172:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1174:	2381      	movs	r3, #129	; 0x81
 80a1176:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1178:	bd10      	pop	{r4, pc}
 80a117a:	bf00      	nop
 80a117c:	2000059d 	.word	0x2000059d
 80a1180:	2000051c 	.word	0x2000051c

080a1184 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1184:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1186:	4d0e      	ldr	r5, [pc, #56]	; (80a11c0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1188:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a118a:	a801      	add	r0, sp, #4
 80a118c:	f7ff ffe4 	bl	80a1158 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1190:	6829      	ldr	r1, [r5, #0]
 80a1192:	f011 0401 	ands.w	r4, r1, #1
 80a1196:	d110      	bne.n	80a11ba <_Z16_fetch_usbserialv+0x36>
 80a1198:	4628      	mov	r0, r5
 80a119a:	f7fe ff82 	bl	80a00a2 <__cxa_guard_acquire>
 80a119e:	b160      	cbz	r0, 80a11ba <_Z16_fetch_usbserialv+0x36>
 80a11a0:	aa01      	add	r2, sp, #4
 80a11a2:	4621      	mov	r1, r4
 80a11a4:	4807      	ldr	r0, [pc, #28]	; (80a11c4 <_Z16_fetch_usbserialv+0x40>)
 80a11a6:	f7ff ffc3 	bl	80a1130 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a11aa:	4628      	mov	r0, r5
 80a11ac:	f7fe ff7e 	bl	80a00ac <__cxa_guard_release>
 80a11b0:	4a05      	ldr	r2, [pc, #20]	; (80a11c8 <_Z16_fetch_usbserialv+0x44>)
 80a11b2:	4906      	ldr	r1, [pc, #24]	; (80a11cc <_Z16_fetch_usbserialv+0x48>)
 80a11b4:	4803      	ldr	r0, [pc, #12]	; (80a11c4 <_Z16_fetch_usbserialv+0x40>)
 80a11b6:	f000 f9ab 	bl	80a1510 <__aeabi_atexit>
	return _usbserial;
}
 80a11ba:	4802      	ldr	r0, [pc, #8]	; (80a11c4 <_Z16_fetch_usbserialv+0x40>)
 80a11bc:	b007      	add	sp, #28
 80a11be:	bd30      	pop	{r4, r5, pc}
 80a11c0:	20000518 	.word	0x20000518
 80a11c4:	200006a0 	.word	0x200006a0
 80a11c8:	2000036c 	.word	0x2000036c
 80a11cc:	080a10e1 	.word	0x080a10e1

080a11d0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a11d0:	b510      	push	{r4, lr}
 80a11d2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a11d4:	2214      	movs	r2, #20
 80a11d6:	2100      	movs	r1, #0
 80a11d8:	f000 fdfd 	bl	80a1dd6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a11dc:	4b05      	ldr	r3, [pc, #20]	; (80a11f4 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a11de:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a11e0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a11e2:	4b05      	ldr	r3, [pc, #20]	; (80a11f8 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a11e4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a11e6:	f240 1301 	movw	r3, #257	; 0x101
 80a11ea:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a11ec:	2381      	movs	r3, #129	; 0x81
 80a11ee:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a11f0:	bd10      	pop	{r4, pc}
 80a11f2:	bf00      	nop
 80a11f4:	20000750 	.word	0x20000750
 80a11f8:	200006b8 	.word	0x200006b8

080a11fc <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a11fc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a11fe:	4c0e      	ldr	r4, [pc, #56]	; (80a1238 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1200:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1202:	a801      	add	r0, sp, #4
 80a1204:	f7ff ffe4 	bl	80a11d0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1208:	6823      	ldr	r3, [r4, #0]
 80a120a:	07db      	lsls	r3, r3, #31
 80a120c:	d410      	bmi.n	80a1230 <_Z17_fetch_usbserial1v+0x34>
 80a120e:	4620      	mov	r0, r4
 80a1210:	f7fe ff47 	bl	80a00a2 <__cxa_guard_acquire>
 80a1214:	b160      	cbz	r0, 80a1230 <_Z17_fetch_usbserial1v+0x34>
 80a1216:	aa01      	add	r2, sp, #4
 80a1218:	2101      	movs	r1, #1
 80a121a:	4808      	ldr	r0, [pc, #32]	; (80a123c <_Z17_fetch_usbserial1v+0x40>)
 80a121c:	f7ff ff88 	bl	80a1130 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1220:	4620      	mov	r0, r4
 80a1222:	f7fe ff43 	bl	80a00ac <__cxa_guard_release>
 80a1226:	4a06      	ldr	r2, [pc, #24]	; (80a1240 <_Z17_fetch_usbserial1v+0x44>)
 80a1228:	4906      	ldr	r1, [pc, #24]	; (80a1244 <_Z17_fetch_usbserial1v+0x48>)
 80a122a:	4804      	ldr	r0, [pc, #16]	; (80a123c <_Z17_fetch_usbserial1v+0x40>)
 80a122c:	f000 f970 	bl	80a1510 <__aeabi_atexit>
  return _usbserial1;
}
 80a1230:	4802      	ldr	r0, [pc, #8]	; (80a123c <_Z17_fetch_usbserial1v+0x40>)
 80a1232:	b006      	add	sp, #24
 80a1234:	bd10      	pop	{r4, pc}
 80a1236:	bf00      	nop
 80a1238:	200006b4 	.word	0x200006b4
 80a123c:	2000073c 	.word	0x2000073c
 80a1240:	2000036c 	.word	0x2000036c
 80a1244:	080a10e1 	.word	0x080a10e1

080a1248 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a1248:	4770      	bx	lr

080a124a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a124a:	2200      	movs	r2, #0
 80a124c:	4611      	mov	r1, r2
 80a124e:	4610      	mov	r0, r2
 80a1250:	f7ff bac4 	b.w	80a07dc <network_ready>

080a1254 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a1254:	4803      	ldr	r0, [pc, #12]	; (80a1264 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x10>)
 80a1256:	4b04      	ldr	r3, [pc, #16]	; (80a1268 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a1258:	4a04      	ldr	r2, [pc, #16]	; (80a126c <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x18>)
 80a125a:	4905      	ldr	r1, [pc, #20]	; (80a1270 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x1c>)
 80a125c:	6003      	str	r3, [r0, #0]
 80a125e:	f000 b957 	b.w	80a1510 <__aeabi_atexit>
 80a1262:	bf00      	nop
 80a1264:	20000854 	.word	0x20000854
 80a1268:	080a2054 	.word	0x080a2054
 80a126c:	2000036c 	.word	0x2000036c
 80a1270:	080a1249 	.word	0x080a1249

080a1274 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1274:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1276:	4b14      	ldr	r3, [pc, #80]	; (80a12c8 <serialEventRun+0x54>)
 80a1278:	b133      	cbz	r3, 80a1288 <serialEventRun+0x14>
 80a127a:	f7ff ff83 	bl	80a1184 <_Z16_fetch_usbserialv>
 80a127e:	6803      	ldr	r3, [r0, #0]
 80a1280:	691b      	ldr	r3, [r3, #16]
 80a1282:	4798      	blx	r3
 80a1284:	2800      	cmp	r0, #0
 80a1286:	dc16      	bgt.n	80a12b6 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1288:	4b10      	ldr	r3, [pc, #64]	; (80a12cc <serialEventRun+0x58>)
 80a128a:	b133      	cbz	r3, 80a129a <serialEventRun+0x26>
 80a128c:	f7ff ff00 	bl	80a1090 <_Z22__fetch_global_Serial1v>
 80a1290:	6803      	ldr	r3, [r0, #0]
 80a1292:	691b      	ldr	r3, [r3, #16]
 80a1294:	4798      	blx	r3
 80a1296:	2800      	cmp	r0, #0
 80a1298:	dc10      	bgt.n	80a12bc <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a129a:	4b0d      	ldr	r3, [pc, #52]	; (80a12d0 <serialEventRun+0x5c>)
 80a129c:	b10b      	cbz	r3, 80a12a2 <serialEventRun+0x2e>
 80a129e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a12a2:	4b0c      	ldr	r3, [pc, #48]	; (80a12d4 <serialEventRun+0x60>)
 80a12a4:	b17b      	cbz	r3, 80a12c6 <serialEventRun+0x52>
 80a12a6:	f7ff ffa9 	bl	80a11fc <_Z17_fetch_usbserial1v>
 80a12aa:	6803      	ldr	r3, [r0, #0]
 80a12ac:	691b      	ldr	r3, [r3, #16]
 80a12ae:	4798      	blx	r3
 80a12b0:	2800      	cmp	r0, #0
 80a12b2:	dc06      	bgt.n	80a12c2 <serialEventRun+0x4e>
 80a12b4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a12b6:	f3af 8000 	nop.w
 80a12ba:	e7e5      	b.n	80a1288 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a12bc:	f3af 8000 	nop.w
 80a12c0:	e7eb      	b.n	80a129a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a12c2:	f3af 8000 	nop.w
 80a12c6:	bd08      	pop	{r3, pc}
	...

080a12d8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a12d8:	b508      	push	{r3, lr}
	serialEventRun();
 80a12da:	f7ff ffcb 	bl	80a1274 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a12de:	f7ff f943 	bl	80a0568 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a12e2:	4b01      	ldr	r3, [pc, #4]	; (80a12e8 <_post_loop+0x10>)
 80a12e4:	6018      	str	r0, [r3, #0]
 80a12e6:	bd08      	pop	{r3, pc}
 80a12e8:	20000860 	.word	0x20000860

080a12ec <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a12ec:	4802      	ldr	r0, [pc, #8]	; (80a12f8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a12ee:	4a03      	ldr	r2, [pc, #12]	; (80a12fc <_Z33system_initialize_user_backup_ramv+0x10>)
 80a12f0:	4903      	ldr	r1, [pc, #12]	; (80a1300 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a12f2:	1a12      	subs	r2, r2, r0
 80a12f4:	f000 bd64 	b.w	80a1dc0 <memcpy>
 80a12f8:	40024000 	.word	0x40024000
 80a12fc:	40024008 	.word	0x40024008
 80a1300:	080a20f0 	.word	0x080a20f0

080a1304 <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 80a1304:	2000      	movs	r0, #0
 80a1306:	4770      	bx	lr

080a1308 <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a1308:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 80a130a:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a130c:	4604      	mov	r4, r0
    switch (req->type) {
 80a130e:	2b0a      	cmp	r3, #10
 80a1310:	d00e      	beq.n	80a1330 <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 80a1312:	2b50      	cmp	r3, #80	; 0x50
 80a1314:	d11c      	bne.n	80a1350 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 80a1316:	4b10      	ldr	r3, [pc, #64]	; (80a1358 <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 80a1318:	681d      	ldr	r5, [r3, #0]
 80a131a:	b1cd      	cbz	r5, 80a1350 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 80a131c:	7d03      	ldrb	r3, [r0, #20]
 80a131e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a1322:	9300      	str	r3, [sp, #0]
 80a1324:	68c2      	ldr	r2, [r0, #12]
 80a1326:	f100 0310 	add.w	r3, r0, #16
 80a132a:	6880      	ldr	r0, [r0, #8]
 80a132c:	47a8      	blx	r5
 80a132e:	e007      	b.n	80a1340 <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 80a1330:	f100 0310 	add.w	r3, r0, #16
 80a1334:	68c2      	ldr	r2, [r0, #12]
 80a1336:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a133a:	6880      	ldr	r0, [r0, #8]
 80a133c:	f7ff ffe2 	bl	80a1304 <_Z26usb_request_custom_handlerPcjjPj>
 80a1340:	b130      	cbz	r0, 80a1350 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 80a1342:	2200      	movs	r2, #0
 80a1344:	4620      	mov	r0, r4
 80a1346:	4611      	mov	r1, r2
 80a1348:	f7ff fa28 	bl	80a079c <system_set_usb_request_result>
        return true;
 80a134c:	2001      	movs	r0, #1
 80a134e:	e000      	b.n	80a1352 <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 80a1350:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 80a1352:	b003      	add	sp, #12
 80a1354:	bd30      	pop	{r4, r5, pc}
 80a1356:	bf00      	nop
 80a1358:	20000858 	.word	0x20000858

080a135c <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 80a135c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a135e:	4c0c      	ldr	r4, [pc, #48]	; (80a1390 <module_user_init_hook+0x34>)
 80a1360:	4d0c      	ldr	r5, [pc, #48]	; (80a1394 <module_user_init_hook+0x38>)
 80a1362:	6823      	ldr	r3, [r4, #0]
 80a1364:	42ab      	cmp	r3, r5
 80a1366:	4b0c      	ldr	r3, [pc, #48]	; (80a1398 <module_user_init_hook+0x3c>)
 80a1368:	bf0c      	ite	eq
 80a136a:	2201      	moveq	r2, #1
 80a136c:	2200      	movne	r2, #0
 80a136e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1370:	d002      	beq.n	80a1378 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1372:	f7ff ffbb 	bl	80a12ec <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1376:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 80a1378:	4b08      	ldr	r3, [pc, #32]	; (80a139c <module_user_init_hook+0x40>)
 80a137a:	b11b      	cbz	r3, 80a1384 <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 80a137c:	f7ff f8ec 	bl	80a0558 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 80a1380:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 80a1384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 80a1388:	2100      	movs	r1, #0
 80a138a:	4805      	ldr	r0, [pc, #20]	; (80a13a0 <module_user_init_hook+0x44>)
 80a138c:	f7ff b9fe 	b.w	80a078c <system_set_usb_request_app_handler>
 80a1390:	40024004 	.word	0x40024004
 80a1394:	9a271c1e 	.word	0x9a271c1e
 80a1398:	2000085c 	.word	0x2000085c
 80a139c:	00000000 	.word	0x00000000
 80a13a0:	080a1309 	.word	0x080a1309

080a13a4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a13a4:	b510      	push	{r4, lr}
 80a13a6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a13a8:	480f      	ldr	r0, [pc, #60]	; (80a13e8 <pinAvailable+0x44>)
 80a13aa:	f7ff fe1d 	bl	80a0fe8 <_ZN8SPIClass9isEnabledEv>
 80a13ae:	b128      	cbz	r0, 80a13bc <pinAvailable+0x18>
 80a13b0:	f1a4 030d 	sub.w	r3, r4, #13
 80a13b4:	2b02      	cmp	r3, #2
 80a13b6:	d801      	bhi.n	80a13bc <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a13b8:	2000      	movs	r0, #0
 80a13ba:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a13bc:	f000 f84e 	bl	80a145c <_Z19__fetch_global_Wirev>
 80a13c0:	f7ff fd46 	bl	80a0e50 <_ZN7TwoWire9isEnabledEv>
 80a13c4:	b108      	cbz	r0, 80a13ca <pinAvailable+0x26>
 80a13c6:	2c01      	cmp	r4, #1
 80a13c8:	d9f6      	bls.n	80a13b8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a13ca:	f7ff fe61 	bl	80a1090 <_Z22__fetch_global_Serial1v>
 80a13ce:	f7ff fe5b 	bl	80a1088 <_ZN11USARTSerial9isEnabledEv>
 80a13d2:	b118      	cbz	r0, 80a13dc <pinAvailable+0x38>
 80a13d4:	f1a4 0312 	sub.w	r3, r4, #18
 80a13d8:	2b01      	cmp	r3, #1
 80a13da:	d9ed      	bls.n	80a13b8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a13dc:	2c17      	cmp	r4, #23
 80a13de:	bf8c      	ite	hi
 80a13e0:	2000      	movhi	r0, #0
 80a13e2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a13e4:	bd10      	pop	{r4, pc}
 80a13e6:	bf00      	nop
 80a13e8:	20000894 	.word	0x20000894

080a13ec <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a13ec:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a13ee:	b538      	push	{r3, r4, r5, lr}
 80a13f0:	4604      	mov	r4, r0
 80a13f2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a13f4:	d80a      	bhi.n	80a140c <pinMode+0x20>
 80a13f6:	29ff      	cmp	r1, #255	; 0xff
 80a13f8:	d008      	beq.n	80a140c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a13fa:	f7ff ffd3 	bl	80a13a4 <pinAvailable>
 80a13fe:	b128      	cbz	r0, 80a140c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1400:	4629      	mov	r1, r5
 80a1402:	4620      	mov	r0, r4
}
 80a1404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1408:	f7ff b8c6 	b.w	80a0598 <HAL_Pin_Mode>
 80a140c:	bd38      	pop	{r3, r4, r5, pc}

080a140e <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
 80a140e:	b538      	push	{r3, r4, r5, lr}
 80a1410:	4604      	mov	r4, r0
 80a1412:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 80a1414:	f7ff ffc6 	bl	80a13a4 <pinAvailable>
 80a1418:	b1f0      	cbz	r0, 80a1458 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 80a141a:	2104      	movs	r1, #4
 80a141c:	4620      	mov	r0, r4
 80a141e:	f7ff f8b3 	bl	80a0588 <HAL_Validate_Pin_Function>
 80a1422:	2804      	cmp	r0, #4
 80a1424:	d105      	bne.n	80a1432 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 80a1426:	b2a9      	uxth	r1, r5
 80a1428:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
 80a142a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
 80a142e:	f7ff b8c3 	b.w	80a05b8 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 80a1432:	2102      	movs	r1, #2
 80a1434:	4620      	mov	r0, r4
 80a1436:	f7ff f8a7 	bl	80a0588 <HAL_Validate_Pin_Function>
 80a143a:	2802      	cmp	r0, #2
 80a143c:	d10c      	bne.n	80a1458 <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
 80a143e:	4620      	mov	r0, r4
 80a1440:	f7ff f8b2 	bl	80a05a8 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 80a1444:	2801      	cmp	r0, #1
 80a1446:	d001      	beq.n	80a144c <_Z11analogWritetm+0x3e>
 80a1448:	2804      	cmp	r0, #4
 80a144a:	d105      	bne.n	80a1458 <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 80a144c:	4629      	mov	r1, r5
 80a144e:	4620      	mov	r0, r4
    }
}
 80a1450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 80a1454:	f7ff b8b8 	b.w	80a05c8 <HAL_PWM_Write_Ext>
 80a1458:	bd38      	pop	{r3, r4, r5, pc}
	...

080a145c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a145c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a145e:	4d0b      	ldr	r5, [pc, #44]	; (80a148c <_Z19__fetch_global_Wirev+0x30>)
 80a1460:	6829      	ldr	r1, [r5, #0]
 80a1462:	f011 0401 	ands.w	r4, r1, #1
 80a1466:	d10f      	bne.n	80a1488 <_Z19__fetch_global_Wirev+0x2c>
 80a1468:	4628      	mov	r0, r5
 80a146a:	f7fe fe1a 	bl	80a00a2 <__cxa_guard_acquire>
 80a146e:	b158      	cbz	r0, 80a1488 <_Z19__fetch_global_Wirev+0x2c>
 80a1470:	4621      	mov	r1, r4
 80a1472:	4807      	ldr	r0, [pc, #28]	; (80a1490 <_Z19__fetch_global_Wirev+0x34>)
 80a1474:	f7ff fcda 	bl	80a0e2c <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1478:	4628      	mov	r0, r5
 80a147a:	f7fe fe17 	bl	80a00ac <__cxa_guard_release>
 80a147e:	4a05      	ldr	r2, [pc, #20]	; (80a1494 <_Z19__fetch_global_Wirev+0x38>)
 80a1480:	4905      	ldr	r1, [pc, #20]	; (80a1498 <_Z19__fetch_global_Wirev+0x3c>)
 80a1482:	4803      	ldr	r0, [pc, #12]	; (80a1490 <_Z19__fetch_global_Wirev+0x34>)
 80a1484:	f000 f844 	bl	80a1510 <__aeabi_atexit>
	return wire;
}
 80a1488:	4801      	ldr	r0, [pc, #4]	; (80a1490 <_Z19__fetch_global_Wirev+0x34>)
 80a148a:	bd38      	pop	{r3, r4, r5, pc}
 80a148c:	20000864 	.word	0x20000864
 80a1490:	20000868 	.word	0x20000868
 80a1494:	2000036c 	.word	0x2000036c
 80a1498:	080a0dd5 	.word	0x080a0dd5

080a149c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a149c:	b513      	push	{r0, r1, r4, lr}
 80a149e:	4c08      	ldr	r4, [pc, #32]	; (80a14c0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a14a0:	2300      	movs	r3, #0
 80a14a2:	461a      	mov	r2, r3
 80a14a4:	4619      	mov	r1, r3
 80a14a6:	9300      	str	r3, [sp, #0]
 80a14a8:	4620      	mov	r0, r4
 80a14aa:	f7ff fd03 	bl	80a0eb4 <_ZN9IPAddressC1Ehhhh>
 80a14ae:	4620      	mov	r0, r4
 80a14b0:	4a04      	ldr	r2, [pc, #16]	; (80a14c4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a14b2:	4905      	ldr	r1, [pc, #20]	; (80a14c8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a14b4:	b002      	add	sp, #8
 80a14b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a14ba:	f000 b829 	b.w	80a1510 <__aeabi_atexit>
 80a14be:	bf00      	nop
 80a14c0:	2000087c 	.word	0x2000087c
 80a14c4:	2000036c 	.word	0x2000036c
 80a14c8:	080a0e59 	.word	0x080a0e59

080a14cc <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a14cc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a14ce:	4c0c      	ldr	r4, [pc, #48]	; (80a1500 <_GLOBAL__sub_I_SPI+0x34>)
 80a14d0:	4e0c      	ldr	r6, [pc, #48]	; (80a1504 <_GLOBAL__sub_I_SPI+0x38>)
 80a14d2:	4d0d      	ldr	r5, [pc, #52]	; (80a1508 <_GLOBAL__sub_I_SPI+0x3c>)
 80a14d4:	2100      	movs	r1, #0
 80a14d6:	4620      	mov	r0, r4
 80a14d8:	f7ff fd72 	bl	80a0fc0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a14dc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a14de:	4c0b      	ldr	r4, [pc, #44]	; (80a150c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a14e0:	4632      	mov	r2, r6
 80a14e2:	4629      	mov	r1, r5
 80a14e4:	f000 f814 	bl	80a1510 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a14e8:	2101      	movs	r1, #1
 80a14ea:	4620      	mov	r0, r4
 80a14ec:	f7ff fd68 	bl	80a0fc0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a14f0:	4632      	mov	r2, r6
 80a14f2:	4629      	mov	r1, r5
 80a14f4:	4620      	mov	r0, r4
 80a14f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a14fa:	f000 b809 	b.w	80a1510 <__aeabi_atexit>
 80a14fe:	bf00      	nop
 80a1500:	20000894 	.word	0x20000894
 80a1504:	2000036c 	.word	0x2000036c
 80a1508:	080a0fb1 	.word	0x080a0fb1
 80a150c:	200008a4 	.word	0x200008a4

080a1510 <__aeabi_atexit>:
 80a1510:	460b      	mov	r3, r1
 80a1512:	4601      	mov	r1, r0
 80a1514:	4618      	mov	r0, r3
 80a1516:	f000 bc45 	b.w	80a1da4 <__cxa_atexit>

080a151a <_ZSt25__throw_bad_function_callv>:
 80a151a:	b508      	push	{r3, lr}
 80a151c:	f7ff f976 	bl	80a080c <abort>

080a1520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1520:	4b24      	ldr	r3, [pc, #144]	; (80a15b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1522:	681a      	ldr	r2, [r3, #0]
 80a1524:	07d0      	lsls	r0, r2, #31
 80a1526:	bf5c      	itt	pl
 80a1528:	2201      	movpl	r2, #1
 80a152a:	601a      	strpl	r2, [r3, #0]
 80a152c:	4b22      	ldr	r3, [pc, #136]	; (80a15b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a152e:	681a      	ldr	r2, [r3, #0]
 80a1530:	07d1      	lsls	r1, r2, #31
 80a1532:	bf5c      	itt	pl
 80a1534:	2201      	movpl	r2, #1
 80a1536:	601a      	strpl	r2, [r3, #0]
 80a1538:	4b20      	ldr	r3, [pc, #128]	; (80a15bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a153a:	681a      	ldr	r2, [r3, #0]
 80a153c:	07d2      	lsls	r2, r2, #31
 80a153e:	bf5c      	itt	pl
 80a1540:	2201      	movpl	r2, #1
 80a1542:	601a      	strpl	r2, [r3, #0]
 80a1544:	4b1e      	ldr	r3, [pc, #120]	; (80a15c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1546:	681a      	ldr	r2, [r3, #0]
 80a1548:	07d0      	lsls	r0, r2, #31
 80a154a:	bf5c      	itt	pl
 80a154c:	2201      	movpl	r2, #1
 80a154e:	601a      	strpl	r2, [r3, #0]
 80a1550:	4b1c      	ldr	r3, [pc, #112]	; (80a15c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1552:	681a      	ldr	r2, [r3, #0]
 80a1554:	07d1      	lsls	r1, r2, #31
 80a1556:	bf5c      	itt	pl
 80a1558:	2201      	movpl	r2, #1
 80a155a:	601a      	strpl	r2, [r3, #0]
 80a155c:	4b1a      	ldr	r3, [pc, #104]	; (80a15c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a155e:	681a      	ldr	r2, [r3, #0]
 80a1560:	07d2      	lsls	r2, r2, #31
 80a1562:	bf5c      	itt	pl
 80a1564:	2201      	movpl	r2, #1
 80a1566:	601a      	strpl	r2, [r3, #0]
 80a1568:	4b18      	ldr	r3, [pc, #96]	; (80a15cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a156a:	681a      	ldr	r2, [r3, #0]
 80a156c:	07d0      	lsls	r0, r2, #31
 80a156e:	bf5c      	itt	pl
 80a1570:	2201      	movpl	r2, #1
 80a1572:	601a      	strpl	r2, [r3, #0]
 80a1574:	4b16      	ldr	r3, [pc, #88]	; (80a15d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1576:	681a      	ldr	r2, [r3, #0]
 80a1578:	07d1      	lsls	r1, r2, #31
 80a157a:	bf5c      	itt	pl
 80a157c:	2201      	movpl	r2, #1
 80a157e:	601a      	strpl	r2, [r3, #0]
 80a1580:	4b14      	ldr	r3, [pc, #80]	; (80a15d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1582:	681a      	ldr	r2, [r3, #0]
 80a1584:	07d2      	lsls	r2, r2, #31
 80a1586:	bf5c      	itt	pl
 80a1588:	2201      	movpl	r2, #1
 80a158a:	601a      	strpl	r2, [r3, #0]
 80a158c:	4b12      	ldr	r3, [pc, #72]	; (80a15d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a158e:	681a      	ldr	r2, [r3, #0]
 80a1590:	07d0      	lsls	r0, r2, #31
 80a1592:	bf5c      	itt	pl
 80a1594:	2201      	movpl	r2, #1
 80a1596:	601a      	strpl	r2, [r3, #0]
 80a1598:	4b10      	ldr	r3, [pc, #64]	; (80a15dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a159a:	681a      	ldr	r2, [r3, #0]
 80a159c:	07d1      	lsls	r1, r2, #31
 80a159e:	bf5c      	itt	pl
 80a15a0:	2201      	movpl	r2, #1
 80a15a2:	601a      	strpl	r2, [r3, #0]
 80a15a4:	4b0e      	ldr	r3, [pc, #56]	; (80a15e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a15a6:	681a      	ldr	r2, [r3, #0]
 80a15a8:	07d2      	lsls	r2, r2, #31
 80a15aa:	bf5c      	itt	pl
 80a15ac:	2201      	movpl	r2, #1
 80a15ae:	601a      	strpl	r2, [r3, #0]
 80a15b0:	4770      	bx	lr
 80a15b2:	bf00      	nop
 80a15b4:	200008e0 	.word	0x200008e0
 80a15b8:	200008dc 	.word	0x200008dc
 80a15bc:	200008d8 	.word	0x200008d8
 80a15c0:	200008d4 	.word	0x200008d4
 80a15c4:	200008d0 	.word	0x200008d0
 80a15c8:	200008cc 	.word	0x200008cc
 80a15cc:	200008c8 	.word	0x200008c8
 80a15d0:	200008c4 	.word	0x200008c4
 80a15d4:	200008c0 	.word	0x200008c0
 80a15d8:	200008bc 	.word	0x200008bc
 80a15dc:	200008b8 	.word	0x200008b8
 80a15e0:	200008b4 	.word	0x200008b4

080a15e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a15e4:	4b18      	ldr	r3, [pc, #96]	; (80a1648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a15e6:	681a      	ldr	r2, [r3, #0]
 80a15e8:	07d1      	lsls	r1, r2, #31
 80a15ea:	bf5c      	itt	pl
 80a15ec:	2201      	movpl	r2, #1
 80a15ee:	601a      	strpl	r2, [r3, #0]
 80a15f0:	4b16      	ldr	r3, [pc, #88]	; (80a164c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a15f2:	681a      	ldr	r2, [r3, #0]
 80a15f4:	07d2      	lsls	r2, r2, #31
 80a15f6:	bf5c      	itt	pl
 80a15f8:	2201      	movpl	r2, #1
 80a15fa:	601a      	strpl	r2, [r3, #0]
 80a15fc:	4b14      	ldr	r3, [pc, #80]	; (80a1650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a15fe:	681a      	ldr	r2, [r3, #0]
 80a1600:	07d0      	lsls	r0, r2, #31
 80a1602:	bf5c      	itt	pl
 80a1604:	2201      	movpl	r2, #1
 80a1606:	601a      	strpl	r2, [r3, #0]
 80a1608:	4b12      	ldr	r3, [pc, #72]	; (80a1654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a160a:	681a      	ldr	r2, [r3, #0]
 80a160c:	07d1      	lsls	r1, r2, #31
 80a160e:	bf5c      	itt	pl
 80a1610:	2201      	movpl	r2, #1
 80a1612:	601a      	strpl	r2, [r3, #0]
 80a1614:	4b10      	ldr	r3, [pc, #64]	; (80a1658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1616:	681a      	ldr	r2, [r3, #0]
 80a1618:	07d2      	lsls	r2, r2, #31
 80a161a:	bf5c      	itt	pl
 80a161c:	2201      	movpl	r2, #1
 80a161e:	601a      	strpl	r2, [r3, #0]
 80a1620:	4b0e      	ldr	r3, [pc, #56]	; (80a165c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1622:	681a      	ldr	r2, [r3, #0]
 80a1624:	07d0      	lsls	r0, r2, #31
 80a1626:	bf5c      	itt	pl
 80a1628:	2201      	movpl	r2, #1
 80a162a:	601a      	strpl	r2, [r3, #0]
 80a162c:	4b0c      	ldr	r3, [pc, #48]	; (80a1660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a162e:	681a      	ldr	r2, [r3, #0]
 80a1630:	07d1      	lsls	r1, r2, #31
 80a1632:	bf5c      	itt	pl
 80a1634:	2201      	movpl	r2, #1
 80a1636:	601a      	strpl	r2, [r3, #0]
 80a1638:	4b0a      	ldr	r3, [pc, #40]	; (80a1664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a163a:	681a      	ldr	r2, [r3, #0]
 80a163c:	07d2      	lsls	r2, r2, #31
 80a163e:	bf5c      	itt	pl
 80a1640:	2201      	movpl	r2, #1
 80a1642:	601a      	strpl	r2, [r3, #0]
 80a1644:	4770      	bx	lr
 80a1646:	bf00      	nop
 80a1648:	20000900 	.word	0x20000900
 80a164c:	200008fc 	.word	0x200008fc
 80a1650:	200008f8 	.word	0x200008f8
 80a1654:	200008f4 	.word	0x200008f4
 80a1658:	200008f0 	.word	0x200008f0
 80a165c:	200008ec 	.word	0x200008ec
 80a1660:	200008e8 	.word	0x200008e8
 80a1664:	200008e4 	.word	0x200008e4

080a1668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1668:	4b18      	ldr	r3, [pc, #96]	; (80a16cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a166a:	681a      	ldr	r2, [r3, #0]
 80a166c:	07d1      	lsls	r1, r2, #31
 80a166e:	bf5c      	itt	pl
 80a1670:	2201      	movpl	r2, #1
 80a1672:	601a      	strpl	r2, [r3, #0]
 80a1674:	4b16      	ldr	r3, [pc, #88]	; (80a16d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1676:	681a      	ldr	r2, [r3, #0]
 80a1678:	07d2      	lsls	r2, r2, #31
 80a167a:	bf5c      	itt	pl
 80a167c:	2201      	movpl	r2, #1
 80a167e:	601a      	strpl	r2, [r3, #0]
 80a1680:	4b14      	ldr	r3, [pc, #80]	; (80a16d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1682:	681a      	ldr	r2, [r3, #0]
 80a1684:	07d0      	lsls	r0, r2, #31
 80a1686:	bf5c      	itt	pl
 80a1688:	2201      	movpl	r2, #1
 80a168a:	601a      	strpl	r2, [r3, #0]
 80a168c:	4b12      	ldr	r3, [pc, #72]	; (80a16d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a168e:	681a      	ldr	r2, [r3, #0]
 80a1690:	07d1      	lsls	r1, r2, #31
 80a1692:	bf5c      	itt	pl
 80a1694:	2201      	movpl	r2, #1
 80a1696:	601a      	strpl	r2, [r3, #0]
 80a1698:	4b10      	ldr	r3, [pc, #64]	; (80a16dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a169a:	681a      	ldr	r2, [r3, #0]
 80a169c:	07d2      	lsls	r2, r2, #31
 80a169e:	bf5c      	itt	pl
 80a16a0:	2201      	movpl	r2, #1
 80a16a2:	601a      	strpl	r2, [r3, #0]
 80a16a4:	4b0e      	ldr	r3, [pc, #56]	; (80a16e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a16a6:	681a      	ldr	r2, [r3, #0]
 80a16a8:	07d0      	lsls	r0, r2, #31
 80a16aa:	bf5c      	itt	pl
 80a16ac:	2201      	movpl	r2, #1
 80a16ae:	601a      	strpl	r2, [r3, #0]
 80a16b0:	4b0c      	ldr	r3, [pc, #48]	; (80a16e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a16b2:	681a      	ldr	r2, [r3, #0]
 80a16b4:	07d1      	lsls	r1, r2, #31
 80a16b6:	bf5c      	itt	pl
 80a16b8:	2201      	movpl	r2, #1
 80a16ba:	601a      	strpl	r2, [r3, #0]
 80a16bc:	4b0a      	ldr	r3, [pc, #40]	; (80a16e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a16be:	681a      	ldr	r2, [r3, #0]
 80a16c0:	07d2      	lsls	r2, r2, #31
 80a16c2:	bf5c      	itt	pl
 80a16c4:	2201      	movpl	r2, #1
 80a16c6:	601a      	strpl	r2, [r3, #0]
 80a16c8:	4770      	bx	lr
 80a16ca:	bf00      	nop
 80a16cc:	20000920 	.word	0x20000920
 80a16d0:	2000091c 	.word	0x2000091c
 80a16d4:	20000918 	.word	0x20000918
 80a16d8:	20000914 	.word	0x20000914
 80a16dc:	20000910 	.word	0x20000910
 80a16e0:	2000090c 	.word	0x2000090c
 80a16e4:	20000908 	.word	0x20000908
 80a16e8:	20000904 	.word	0x20000904

080a16ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a16ec:	4b24      	ldr	r3, [pc, #144]	; (80a1780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a16ee:	681a      	ldr	r2, [r3, #0]
 80a16f0:	07d0      	lsls	r0, r2, #31
 80a16f2:	bf5c      	itt	pl
 80a16f4:	2201      	movpl	r2, #1
 80a16f6:	601a      	strpl	r2, [r3, #0]
 80a16f8:	4b22      	ldr	r3, [pc, #136]	; (80a1784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a16fa:	681a      	ldr	r2, [r3, #0]
 80a16fc:	07d1      	lsls	r1, r2, #31
 80a16fe:	bf5c      	itt	pl
 80a1700:	2201      	movpl	r2, #1
 80a1702:	601a      	strpl	r2, [r3, #0]
 80a1704:	4b20      	ldr	r3, [pc, #128]	; (80a1788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1706:	681a      	ldr	r2, [r3, #0]
 80a1708:	07d2      	lsls	r2, r2, #31
 80a170a:	bf5c      	itt	pl
 80a170c:	2201      	movpl	r2, #1
 80a170e:	601a      	strpl	r2, [r3, #0]
 80a1710:	4b1e      	ldr	r3, [pc, #120]	; (80a178c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1712:	681a      	ldr	r2, [r3, #0]
 80a1714:	07d0      	lsls	r0, r2, #31
 80a1716:	bf5c      	itt	pl
 80a1718:	2201      	movpl	r2, #1
 80a171a:	601a      	strpl	r2, [r3, #0]
 80a171c:	4b1c      	ldr	r3, [pc, #112]	; (80a1790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a171e:	681a      	ldr	r2, [r3, #0]
 80a1720:	07d1      	lsls	r1, r2, #31
 80a1722:	bf5c      	itt	pl
 80a1724:	2201      	movpl	r2, #1
 80a1726:	601a      	strpl	r2, [r3, #0]
 80a1728:	4b1a      	ldr	r3, [pc, #104]	; (80a1794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a172a:	681a      	ldr	r2, [r3, #0]
 80a172c:	07d2      	lsls	r2, r2, #31
 80a172e:	bf5c      	itt	pl
 80a1730:	2201      	movpl	r2, #1
 80a1732:	601a      	strpl	r2, [r3, #0]
 80a1734:	4b18      	ldr	r3, [pc, #96]	; (80a1798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1736:	681a      	ldr	r2, [r3, #0]
 80a1738:	07d0      	lsls	r0, r2, #31
 80a173a:	bf5c      	itt	pl
 80a173c:	2201      	movpl	r2, #1
 80a173e:	601a      	strpl	r2, [r3, #0]
 80a1740:	4b16      	ldr	r3, [pc, #88]	; (80a179c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1742:	681a      	ldr	r2, [r3, #0]
 80a1744:	07d1      	lsls	r1, r2, #31
 80a1746:	bf5c      	itt	pl
 80a1748:	2201      	movpl	r2, #1
 80a174a:	601a      	strpl	r2, [r3, #0]
 80a174c:	4b14      	ldr	r3, [pc, #80]	; (80a17a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a174e:	681a      	ldr	r2, [r3, #0]
 80a1750:	07d2      	lsls	r2, r2, #31
 80a1752:	bf5c      	itt	pl
 80a1754:	2201      	movpl	r2, #1
 80a1756:	601a      	strpl	r2, [r3, #0]
 80a1758:	4b12      	ldr	r3, [pc, #72]	; (80a17a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a175a:	681a      	ldr	r2, [r3, #0]
 80a175c:	07d0      	lsls	r0, r2, #31
 80a175e:	bf5c      	itt	pl
 80a1760:	2201      	movpl	r2, #1
 80a1762:	601a      	strpl	r2, [r3, #0]
 80a1764:	4b10      	ldr	r3, [pc, #64]	; (80a17a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1766:	681a      	ldr	r2, [r3, #0]
 80a1768:	07d1      	lsls	r1, r2, #31
 80a176a:	bf5c      	itt	pl
 80a176c:	2201      	movpl	r2, #1
 80a176e:	601a      	strpl	r2, [r3, #0]
 80a1770:	4b0e      	ldr	r3, [pc, #56]	; (80a17ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1772:	681a      	ldr	r2, [r3, #0]
 80a1774:	07d2      	lsls	r2, r2, #31
 80a1776:	bf5c      	itt	pl
 80a1778:	2201      	movpl	r2, #1
 80a177a:	601a      	strpl	r2, [r3, #0]
 80a177c:	4770      	bx	lr
 80a177e:	bf00      	nop
 80a1780:	20000950 	.word	0x20000950
 80a1784:	2000094c 	.word	0x2000094c
 80a1788:	20000948 	.word	0x20000948
 80a178c:	20000944 	.word	0x20000944
 80a1790:	20000940 	.word	0x20000940
 80a1794:	2000093c 	.word	0x2000093c
 80a1798:	20000938 	.word	0x20000938
 80a179c:	20000934 	.word	0x20000934
 80a17a0:	20000930 	.word	0x20000930
 80a17a4:	2000092c 	.word	0x2000092c
 80a17a8:	20000928 	.word	0x20000928
 80a17ac:	20000924 	.word	0x20000924

080a17b0 <__aeabi_frsub>:
 80a17b0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a17b4:	e002      	b.n	80a17bc <__addsf3>
 80a17b6:	bf00      	nop

080a17b8 <__aeabi_fsub>:
 80a17b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a17bc <__addsf3>:
 80a17bc:	0042      	lsls	r2, r0, #1
 80a17be:	bf1f      	itttt	ne
 80a17c0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a17c4:	ea92 0f03 	teqne	r2, r3
 80a17c8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a17cc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a17d0:	d06a      	beq.n	80a18a8 <__addsf3+0xec>
 80a17d2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a17d6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a17da:	bfc1      	itttt	gt
 80a17dc:	18d2      	addgt	r2, r2, r3
 80a17de:	4041      	eorgt	r1, r0
 80a17e0:	4048      	eorgt	r0, r1
 80a17e2:	4041      	eorgt	r1, r0
 80a17e4:	bfb8      	it	lt
 80a17e6:	425b      	neglt	r3, r3
 80a17e8:	2b19      	cmp	r3, #25
 80a17ea:	bf88      	it	hi
 80a17ec:	4770      	bxhi	lr
 80a17ee:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a17f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a17f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a17fa:	bf18      	it	ne
 80a17fc:	4240      	negne	r0, r0
 80a17fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1802:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a1806:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a180a:	bf18      	it	ne
 80a180c:	4249      	negne	r1, r1
 80a180e:	ea92 0f03 	teq	r2, r3
 80a1812:	d03f      	beq.n	80a1894 <__addsf3+0xd8>
 80a1814:	f1a2 0201 	sub.w	r2, r2, #1
 80a1818:	fa41 fc03 	asr.w	ip, r1, r3
 80a181c:	eb10 000c 	adds.w	r0, r0, ip
 80a1820:	f1c3 0320 	rsb	r3, r3, #32
 80a1824:	fa01 f103 	lsl.w	r1, r1, r3
 80a1828:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a182c:	d502      	bpl.n	80a1834 <__addsf3+0x78>
 80a182e:	4249      	negs	r1, r1
 80a1830:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a1834:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a1838:	d313      	bcc.n	80a1862 <__addsf3+0xa6>
 80a183a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a183e:	d306      	bcc.n	80a184e <__addsf3+0x92>
 80a1840:	0840      	lsrs	r0, r0, #1
 80a1842:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1846:	f102 0201 	add.w	r2, r2, #1
 80a184a:	2afe      	cmp	r2, #254	; 0xfe
 80a184c:	d251      	bcs.n	80a18f2 <__addsf3+0x136>
 80a184e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a1852:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a1856:	bf08      	it	eq
 80a1858:	f020 0001 	biceq.w	r0, r0, #1
 80a185c:	ea40 0003 	orr.w	r0, r0, r3
 80a1860:	4770      	bx	lr
 80a1862:	0049      	lsls	r1, r1, #1
 80a1864:	eb40 0000 	adc.w	r0, r0, r0
 80a1868:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a186c:	f1a2 0201 	sub.w	r2, r2, #1
 80a1870:	d1ed      	bne.n	80a184e <__addsf3+0x92>
 80a1872:	fab0 fc80 	clz	ip, r0
 80a1876:	f1ac 0c08 	sub.w	ip, ip, #8
 80a187a:	ebb2 020c 	subs.w	r2, r2, ip
 80a187e:	fa00 f00c 	lsl.w	r0, r0, ip
 80a1882:	bfaa      	itet	ge
 80a1884:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a1888:	4252      	neglt	r2, r2
 80a188a:	4318      	orrge	r0, r3
 80a188c:	bfbc      	itt	lt
 80a188e:	40d0      	lsrlt	r0, r2
 80a1890:	4318      	orrlt	r0, r3
 80a1892:	4770      	bx	lr
 80a1894:	f092 0f00 	teq	r2, #0
 80a1898:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a189c:	bf06      	itte	eq
 80a189e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a18a2:	3201      	addeq	r2, #1
 80a18a4:	3b01      	subne	r3, #1
 80a18a6:	e7b5      	b.n	80a1814 <__addsf3+0x58>
 80a18a8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a18ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a18b0:	bf18      	it	ne
 80a18b2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a18b6:	d021      	beq.n	80a18fc <__addsf3+0x140>
 80a18b8:	ea92 0f03 	teq	r2, r3
 80a18bc:	d004      	beq.n	80a18c8 <__addsf3+0x10c>
 80a18be:	f092 0f00 	teq	r2, #0
 80a18c2:	bf08      	it	eq
 80a18c4:	4608      	moveq	r0, r1
 80a18c6:	4770      	bx	lr
 80a18c8:	ea90 0f01 	teq	r0, r1
 80a18cc:	bf1c      	itt	ne
 80a18ce:	2000      	movne	r0, #0
 80a18d0:	4770      	bxne	lr
 80a18d2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a18d6:	d104      	bne.n	80a18e2 <__addsf3+0x126>
 80a18d8:	0040      	lsls	r0, r0, #1
 80a18da:	bf28      	it	cs
 80a18dc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a18e0:	4770      	bx	lr
 80a18e2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a18e6:	bf3c      	itt	cc
 80a18e8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a18ec:	4770      	bxcc	lr
 80a18ee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a18f2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a18f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a18fa:	4770      	bx	lr
 80a18fc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a1900:	bf16      	itet	ne
 80a1902:	4608      	movne	r0, r1
 80a1904:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a1908:	4601      	movne	r1, r0
 80a190a:	0242      	lsls	r2, r0, #9
 80a190c:	bf06      	itte	eq
 80a190e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a1912:	ea90 0f01 	teqeq	r0, r1
 80a1916:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a191a:	4770      	bx	lr

080a191c <__aeabi_ui2f>:
 80a191c:	f04f 0300 	mov.w	r3, #0
 80a1920:	e004      	b.n	80a192c <__aeabi_i2f+0x8>
 80a1922:	bf00      	nop

080a1924 <__aeabi_i2f>:
 80a1924:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a1928:	bf48      	it	mi
 80a192a:	4240      	negmi	r0, r0
 80a192c:	ea5f 0c00 	movs.w	ip, r0
 80a1930:	bf08      	it	eq
 80a1932:	4770      	bxeq	lr
 80a1934:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a1938:	4601      	mov	r1, r0
 80a193a:	f04f 0000 	mov.w	r0, #0
 80a193e:	e01c      	b.n	80a197a <__aeabi_l2f+0x2a>

080a1940 <__aeabi_ul2f>:
 80a1940:	ea50 0201 	orrs.w	r2, r0, r1
 80a1944:	bf08      	it	eq
 80a1946:	4770      	bxeq	lr
 80a1948:	f04f 0300 	mov.w	r3, #0
 80a194c:	e00a      	b.n	80a1964 <__aeabi_l2f+0x14>
 80a194e:	bf00      	nop

080a1950 <__aeabi_l2f>:
 80a1950:	ea50 0201 	orrs.w	r2, r0, r1
 80a1954:	bf08      	it	eq
 80a1956:	4770      	bxeq	lr
 80a1958:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a195c:	d502      	bpl.n	80a1964 <__aeabi_l2f+0x14>
 80a195e:	4240      	negs	r0, r0
 80a1960:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1964:	ea5f 0c01 	movs.w	ip, r1
 80a1968:	bf02      	ittt	eq
 80a196a:	4684      	moveq	ip, r0
 80a196c:	4601      	moveq	r1, r0
 80a196e:	2000      	moveq	r0, #0
 80a1970:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a1974:	bf08      	it	eq
 80a1976:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a197a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a197e:	fabc f28c 	clz	r2, ip
 80a1982:	3a08      	subs	r2, #8
 80a1984:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a1988:	db10      	blt.n	80a19ac <__aeabi_l2f+0x5c>
 80a198a:	fa01 fc02 	lsl.w	ip, r1, r2
 80a198e:	4463      	add	r3, ip
 80a1990:	fa00 fc02 	lsl.w	ip, r0, r2
 80a1994:	f1c2 0220 	rsb	r2, r2, #32
 80a1998:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a199c:	fa20 f202 	lsr.w	r2, r0, r2
 80a19a0:	eb43 0002 	adc.w	r0, r3, r2
 80a19a4:	bf08      	it	eq
 80a19a6:	f020 0001 	biceq.w	r0, r0, #1
 80a19aa:	4770      	bx	lr
 80a19ac:	f102 0220 	add.w	r2, r2, #32
 80a19b0:	fa01 fc02 	lsl.w	ip, r1, r2
 80a19b4:	f1c2 0220 	rsb	r2, r2, #32
 80a19b8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a19bc:	fa21 f202 	lsr.w	r2, r1, r2
 80a19c0:	eb43 0002 	adc.w	r0, r3, r2
 80a19c4:	bf08      	it	eq
 80a19c6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a19ca:	4770      	bx	lr

080a19cc <__aeabi_fmul>:
 80a19cc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a19d0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a19d4:	bf1e      	ittt	ne
 80a19d6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a19da:	ea92 0f0c 	teqne	r2, ip
 80a19de:	ea93 0f0c 	teqne	r3, ip
 80a19e2:	d06f      	beq.n	80a1ac4 <__aeabi_fmul+0xf8>
 80a19e4:	441a      	add	r2, r3
 80a19e6:	ea80 0c01 	eor.w	ip, r0, r1
 80a19ea:	0240      	lsls	r0, r0, #9
 80a19ec:	bf18      	it	ne
 80a19ee:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a19f2:	d01e      	beq.n	80a1a32 <__aeabi_fmul+0x66>
 80a19f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a19f8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a19fc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a1a00:	fba0 3101 	umull	r3, r1, r0, r1
 80a1a04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a1a08:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a1a0c:	bf3e      	ittt	cc
 80a1a0e:	0049      	lslcc	r1, r1, #1
 80a1a10:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a1a14:	005b      	lslcc	r3, r3, #1
 80a1a16:	ea40 0001 	orr.w	r0, r0, r1
 80a1a1a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a1a1e:	2afd      	cmp	r2, #253	; 0xfd
 80a1a20:	d81d      	bhi.n	80a1a5e <__aeabi_fmul+0x92>
 80a1a22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a1a26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a1a2a:	bf08      	it	eq
 80a1a2c:	f020 0001 	biceq.w	r0, r0, #1
 80a1a30:	4770      	bx	lr
 80a1a32:	f090 0f00 	teq	r0, #0
 80a1a36:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a1a3a:	bf08      	it	eq
 80a1a3c:	0249      	lsleq	r1, r1, #9
 80a1a3e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a1a42:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a1a46:	3a7f      	subs	r2, #127	; 0x7f
 80a1a48:	bfc2      	ittt	gt
 80a1a4a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a1a4e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a1a52:	4770      	bxgt	lr
 80a1a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1a58:	f04f 0300 	mov.w	r3, #0
 80a1a5c:	3a01      	subs	r2, #1
 80a1a5e:	dc5d      	bgt.n	80a1b1c <__aeabi_fmul+0x150>
 80a1a60:	f112 0f19 	cmn.w	r2, #25
 80a1a64:	bfdc      	itt	le
 80a1a66:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a1a6a:	4770      	bxle	lr
 80a1a6c:	f1c2 0200 	rsb	r2, r2, #0
 80a1a70:	0041      	lsls	r1, r0, #1
 80a1a72:	fa21 f102 	lsr.w	r1, r1, r2
 80a1a76:	f1c2 0220 	rsb	r2, r2, #32
 80a1a7a:	fa00 fc02 	lsl.w	ip, r0, r2
 80a1a7e:	ea5f 0031 	movs.w	r0, r1, rrx
 80a1a82:	f140 0000 	adc.w	r0, r0, #0
 80a1a86:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a1a8a:	bf08      	it	eq
 80a1a8c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a1a90:	4770      	bx	lr
 80a1a92:	f092 0f00 	teq	r2, #0
 80a1a96:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a1a9a:	bf02      	ittt	eq
 80a1a9c:	0040      	lsleq	r0, r0, #1
 80a1a9e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a1aa2:	3a01      	subeq	r2, #1
 80a1aa4:	d0f9      	beq.n	80a1a9a <__aeabi_fmul+0xce>
 80a1aa6:	ea40 000c 	orr.w	r0, r0, ip
 80a1aaa:	f093 0f00 	teq	r3, #0
 80a1aae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a1ab2:	bf02      	ittt	eq
 80a1ab4:	0049      	lsleq	r1, r1, #1
 80a1ab6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a1aba:	3b01      	subeq	r3, #1
 80a1abc:	d0f9      	beq.n	80a1ab2 <__aeabi_fmul+0xe6>
 80a1abe:	ea41 010c 	orr.w	r1, r1, ip
 80a1ac2:	e78f      	b.n	80a19e4 <__aeabi_fmul+0x18>
 80a1ac4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a1ac8:	ea92 0f0c 	teq	r2, ip
 80a1acc:	bf18      	it	ne
 80a1ace:	ea93 0f0c 	teqne	r3, ip
 80a1ad2:	d00a      	beq.n	80a1aea <__aeabi_fmul+0x11e>
 80a1ad4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a1ad8:	bf18      	it	ne
 80a1ada:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a1ade:	d1d8      	bne.n	80a1a92 <__aeabi_fmul+0xc6>
 80a1ae0:	ea80 0001 	eor.w	r0, r0, r1
 80a1ae4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a1ae8:	4770      	bx	lr
 80a1aea:	f090 0f00 	teq	r0, #0
 80a1aee:	bf17      	itett	ne
 80a1af0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a1af4:	4608      	moveq	r0, r1
 80a1af6:	f091 0f00 	teqne	r1, #0
 80a1afa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a1afe:	d014      	beq.n	80a1b2a <__aeabi_fmul+0x15e>
 80a1b00:	ea92 0f0c 	teq	r2, ip
 80a1b04:	d101      	bne.n	80a1b0a <__aeabi_fmul+0x13e>
 80a1b06:	0242      	lsls	r2, r0, #9
 80a1b08:	d10f      	bne.n	80a1b2a <__aeabi_fmul+0x15e>
 80a1b0a:	ea93 0f0c 	teq	r3, ip
 80a1b0e:	d103      	bne.n	80a1b18 <__aeabi_fmul+0x14c>
 80a1b10:	024b      	lsls	r3, r1, #9
 80a1b12:	bf18      	it	ne
 80a1b14:	4608      	movne	r0, r1
 80a1b16:	d108      	bne.n	80a1b2a <__aeabi_fmul+0x15e>
 80a1b18:	ea80 0001 	eor.w	r0, r0, r1
 80a1b1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a1b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a1b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1b28:	4770      	bx	lr
 80a1b2a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a1b2e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a1b32:	4770      	bx	lr

080a1b34 <__aeabi_fdiv>:
 80a1b34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1b38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a1b3c:	bf1e      	ittt	ne
 80a1b3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a1b42:	ea92 0f0c 	teqne	r2, ip
 80a1b46:	ea93 0f0c 	teqne	r3, ip
 80a1b4a:	d069      	beq.n	80a1c20 <__aeabi_fdiv+0xec>
 80a1b4c:	eba2 0203 	sub.w	r2, r2, r3
 80a1b50:	ea80 0c01 	eor.w	ip, r0, r1
 80a1b54:	0249      	lsls	r1, r1, #9
 80a1b56:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a1b5a:	d037      	beq.n	80a1bcc <__aeabi_fdiv+0x98>
 80a1b5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a1b60:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a1b64:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a1b68:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a1b6c:	428b      	cmp	r3, r1
 80a1b6e:	bf38      	it	cc
 80a1b70:	005b      	lslcc	r3, r3, #1
 80a1b72:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a1b76:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a1b7a:	428b      	cmp	r3, r1
 80a1b7c:	bf24      	itt	cs
 80a1b7e:	1a5b      	subcs	r3, r3, r1
 80a1b80:	ea40 000c 	orrcs.w	r0, r0, ip
 80a1b84:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a1b88:	bf24      	itt	cs
 80a1b8a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a1b8e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a1b92:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a1b96:	bf24      	itt	cs
 80a1b98:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a1b9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a1ba0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a1ba4:	bf24      	itt	cs
 80a1ba6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a1baa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a1bae:	011b      	lsls	r3, r3, #4
 80a1bb0:	bf18      	it	ne
 80a1bb2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a1bb6:	d1e0      	bne.n	80a1b7a <__aeabi_fdiv+0x46>
 80a1bb8:	2afd      	cmp	r2, #253	; 0xfd
 80a1bba:	f63f af50 	bhi.w	80a1a5e <__aeabi_fmul+0x92>
 80a1bbe:	428b      	cmp	r3, r1
 80a1bc0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a1bc4:	bf08      	it	eq
 80a1bc6:	f020 0001 	biceq.w	r0, r0, #1
 80a1bca:	4770      	bx	lr
 80a1bcc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a1bd0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a1bd4:	327f      	adds	r2, #127	; 0x7f
 80a1bd6:	bfc2      	ittt	gt
 80a1bd8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a1bdc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a1be0:	4770      	bxgt	lr
 80a1be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1be6:	f04f 0300 	mov.w	r3, #0
 80a1bea:	3a01      	subs	r2, #1
 80a1bec:	e737      	b.n	80a1a5e <__aeabi_fmul+0x92>
 80a1bee:	f092 0f00 	teq	r2, #0
 80a1bf2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a1bf6:	bf02      	ittt	eq
 80a1bf8:	0040      	lsleq	r0, r0, #1
 80a1bfa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a1bfe:	3a01      	subeq	r2, #1
 80a1c00:	d0f9      	beq.n	80a1bf6 <__aeabi_fdiv+0xc2>
 80a1c02:	ea40 000c 	orr.w	r0, r0, ip
 80a1c06:	f093 0f00 	teq	r3, #0
 80a1c0a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a1c0e:	bf02      	ittt	eq
 80a1c10:	0049      	lsleq	r1, r1, #1
 80a1c12:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a1c16:	3b01      	subeq	r3, #1
 80a1c18:	d0f9      	beq.n	80a1c0e <__aeabi_fdiv+0xda>
 80a1c1a:	ea41 010c 	orr.w	r1, r1, ip
 80a1c1e:	e795      	b.n	80a1b4c <__aeabi_fdiv+0x18>
 80a1c20:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a1c24:	ea92 0f0c 	teq	r2, ip
 80a1c28:	d108      	bne.n	80a1c3c <__aeabi_fdiv+0x108>
 80a1c2a:	0242      	lsls	r2, r0, #9
 80a1c2c:	f47f af7d 	bne.w	80a1b2a <__aeabi_fmul+0x15e>
 80a1c30:	ea93 0f0c 	teq	r3, ip
 80a1c34:	f47f af70 	bne.w	80a1b18 <__aeabi_fmul+0x14c>
 80a1c38:	4608      	mov	r0, r1
 80a1c3a:	e776      	b.n	80a1b2a <__aeabi_fmul+0x15e>
 80a1c3c:	ea93 0f0c 	teq	r3, ip
 80a1c40:	d104      	bne.n	80a1c4c <__aeabi_fdiv+0x118>
 80a1c42:	024b      	lsls	r3, r1, #9
 80a1c44:	f43f af4c 	beq.w	80a1ae0 <__aeabi_fmul+0x114>
 80a1c48:	4608      	mov	r0, r1
 80a1c4a:	e76e      	b.n	80a1b2a <__aeabi_fmul+0x15e>
 80a1c4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a1c50:	bf18      	it	ne
 80a1c52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a1c56:	d1ca      	bne.n	80a1bee <__aeabi_fdiv+0xba>
 80a1c58:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a1c5c:	f47f af5c 	bne.w	80a1b18 <__aeabi_fmul+0x14c>
 80a1c60:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a1c64:	f47f af3c 	bne.w	80a1ae0 <__aeabi_fmul+0x114>
 80a1c68:	e75f      	b.n	80a1b2a <__aeabi_fmul+0x15e>
 80a1c6a:	bf00      	nop

080a1c6c <__gesf2>:
 80a1c6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a1c70:	e006      	b.n	80a1c80 <__cmpsf2+0x4>
 80a1c72:	bf00      	nop

080a1c74 <__lesf2>:
 80a1c74:	f04f 0c01 	mov.w	ip, #1
 80a1c78:	e002      	b.n	80a1c80 <__cmpsf2+0x4>
 80a1c7a:	bf00      	nop

080a1c7c <__cmpsf2>:
 80a1c7c:	f04f 0c01 	mov.w	ip, #1
 80a1c80:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a1c84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a1c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a1c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a1c90:	bf18      	it	ne
 80a1c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a1c96:	d011      	beq.n	80a1cbc <__cmpsf2+0x40>
 80a1c98:	b001      	add	sp, #4
 80a1c9a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a1c9e:	bf18      	it	ne
 80a1ca0:	ea90 0f01 	teqne	r0, r1
 80a1ca4:	bf58      	it	pl
 80a1ca6:	ebb2 0003 	subspl.w	r0, r2, r3
 80a1caa:	bf88      	it	hi
 80a1cac:	17c8      	asrhi	r0, r1, #31
 80a1cae:	bf38      	it	cc
 80a1cb0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a1cb4:	bf18      	it	ne
 80a1cb6:	f040 0001 	orrne.w	r0, r0, #1
 80a1cba:	4770      	bx	lr
 80a1cbc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a1cc0:	d102      	bne.n	80a1cc8 <__cmpsf2+0x4c>
 80a1cc2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a1cc6:	d105      	bne.n	80a1cd4 <__cmpsf2+0x58>
 80a1cc8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a1ccc:	d1e4      	bne.n	80a1c98 <__cmpsf2+0x1c>
 80a1cce:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a1cd2:	d0e1      	beq.n	80a1c98 <__cmpsf2+0x1c>
 80a1cd4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a1cd8:	4770      	bx	lr
 80a1cda:	bf00      	nop

080a1cdc <__aeabi_cfrcmple>:
 80a1cdc:	4684      	mov	ip, r0
 80a1cde:	4608      	mov	r0, r1
 80a1ce0:	4661      	mov	r1, ip
 80a1ce2:	e7ff      	b.n	80a1ce4 <__aeabi_cfcmpeq>

080a1ce4 <__aeabi_cfcmpeq>:
 80a1ce4:	b50f      	push	{r0, r1, r2, r3, lr}
 80a1ce6:	f7ff ffc9 	bl	80a1c7c <__cmpsf2>
 80a1cea:	2800      	cmp	r0, #0
 80a1cec:	bf48      	it	mi
 80a1cee:	f110 0f00 	cmnmi.w	r0, #0
 80a1cf2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a1cf4 <__aeabi_fcmpeq>:
 80a1cf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1cf8:	f7ff fff4 	bl	80a1ce4 <__aeabi_cfcmpeq>
 80a1cfc:	bf0c      	ite	eq
 80a1cfe:	2001      	moveq	r0, #1
 80a1d00:	2000      	movne	r0, #0
 80a1d02:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1d06:	bf00      	nop

080a1d08 <__aeabi_fcmplt>:
 80a1d08:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1d0c:	f7ff ffea 	bl	80a1ce4 <__aeabi_cfcmpeq>
 80a1d10:	bf34      	ite	cc
 80a1d12:	2001      	movcc	r0, #1
 80a1d14:	2000      	movcs	r0, #0
 80a1d16:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1d1a:	bf00      	nop

080a1d1c <__aeabi_fcmple>:
 80a1d1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1d20:	f7ff ffe0 	bl	80a1ce4 <__aeabi_cfcmpeq>
 80a1d24:	bf94      	ite	ls
 80a1d26:	2001      	movls	r0, #1
 80a1d28:	2000      	movhi	r0, #0
 80a1d2a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1d2e:	bf00      	nop

080a1d30 <__aeabi_fcmpge>:
 80a1d30:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1d34:	f7ff ffd2 	bl	80a1cdc <__aeabi_cfrcmple>
 80a1d38:	bf94      	ite	ls
 80a1d3a:	2001      	movls	r0, #1
 80a1d3c:	2000      	movhi	r0, #0
 80a1d3e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1d42:	bf00      	nop

080a1d44 <__aeabi_fcmpgt>:
 80a1d44:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1d48:	f7ff ffc8 	bl	80a1cdc <__aeabi_cfrcmple>
 80a1d4c:	bf34      	ite	cc
 80a1d4e:	2001      	movcc	r0, #1
 80a1d50:	2000      	movcs	r0, #0
 80a1d52:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1d56:	bf00      	nop

080a1d58 <__aeabi_f2iz>:
 80a1d58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a1d5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a1d60:	d30f      	bcc.n	80a1d82 <__aeabi_f2iz+0x2a>
 80a1d62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a1d66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a1d6a:	d90d      	bls.n	80a1d88 <__aeabi_f2iz+0x30>
 80a1d6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a1d70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a1d74:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a1d78:	fa23 f002 	lsr.w	r0, r3, r2
 80a1d7c:	bf18      	it	ne
 80a1d7e:	4240      	negne	r0, r0
 80a1d80:	4770      	bx	lr
 80a1d82:	f04f 0000 	mov.w	r0, #0
 80a1d86:	4770      	bx	lr
 80a1d88:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a1d8c:	d101      	bne.n	80a1d92 <__aeabi_f2iz+0x3a>
 80a1d8e:	0242      	lsls	r2, r0, #9
 80a1d90:	d105      	bne.n	80a1d9e <__aeabi_f2iz+0x46>
 80a1d92:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a1d96:	bf08      	it	eq
 80a1d98:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a1d9c:	4770      	bx	lr
 80a1d9e:	f04f 0000 	mov.w	r0, #0
 80a1da2:	4770      	bx	lr

080a1da4 <__cxa_atexit>:
 80a1da4:	b510      	push	{r4, lr}
 80a1da6:	4c05      	ldr	r4, [pc, #20]	; (80a1dbc <__cxa_atexit+0x18>)
 80a1da8:	4613      	mov	r3, r2
 80a1daa:	b12c      	cbz	r4, 80a1db8 <__cxa_atexit+0x14>
 80a1dac:	460a      	mov	r2, r1
 80a1dae:	4601      	mov	r1, r0
 80a1db0:	2002      	movs	r0, #2
 80a1db2:	f3af 8000 	nop.w
 80a1db6:	bd10      	pop	{r4, pc}
 80a1db8:	4620      	mov	r0, r4
 80a1dba:	bd10      	pop	{r4, pc}
 80a1dbc:	00000000 	.word	0x00000000

080a1dc0 <memcpy>:
 80a1dc0:	b510      	push	{r4, lr}
 80a1dc2:	1e43      	subs	r3, r0, #1
 80a1dc4:	440a      	add	r2, r1
 80a1dc6:	4291      	cmp	r1, r2
 80a1dc8:	d004      	beq.n	80a1dd4 <memcpy+0x14>
 80a1dca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1dce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1dd2:	e7f8      	b.n	80a1dc6 <memcpy+0x6>
 80a1dd4:	bd10      	pop	{r4, pc}

080a1dd6 <memset>:
 80a1dd6:	4603      	mov	r3, r0
 80a1dd8:	4402      	add	r2, r0
 80a1dda:	4293      	cmp	r3, r2
 80a1ddc:	d002      	beq.n	80a1de4 <memset+0xe>
 80a1dde:	f803 1b01 	strb.w	r1, [r3], #1
 80a1de2:	e7fa      	b.n	80a1dda <memset+0x4>
 80a1de4:	4770      	bx	lr
	...

080a1de8 <strdup>:
 80a1de8:	4b02      	ldr	r3, [pc, #8]	; (80a1df4 <strdup+0xc>)
 80a1dea:	4601      	mov	r1, r0
 80a1dec:	6818      	ldr	r0, [r3, #0]
 80a1dee:	f000 b803 	b.w	80a1df8 <_strdup_r>
 80a1df2:	bf00      	nop
 80a1df4:	20000368 	.word	0x20000368

080a1df8 <_strdup_r>:
 80a1df8:	b570      	push	{r4, r5, r6, lr}
 80a1dfa:	4606      	mov	r6, r0
 80a1dfc:	4608      	mov	r0, r1
 80a1dfe:	460c      	mov	r4, r1
 80a1e00:	f000 f80d 	bl	80a1e1e <strlen>
 80a1e04:	1c45      	adds	r5, r0, #1
 80a1e06:	4629      	mov	r1, r5
 80a1e08:	4630      	mov	r0, r6
 80a1e0a:	f7fe fd07 	bl	80a081c <_malloc_r>
 80a1e0e:	4606      	mov	r6, r0
 80a1e10:	b118      	cbz	r0, 80a1e1a <_strdup_r+0x22>
 80a1e12:	462a      	mov	r2, r5
 80a1e14:	4621      	mov	r1, r4
 80a1e16:	f7ff ffd3 	bl	80a1dc0 <memcpy>
 80a1e1a:	4630      	mov	r0, r6
 80a1e1c:	bd70      	pop	{r4, r5, r6, pc}

080a1e1e <strlen>:
 80a1e1e:	4603      	mov	r3, r0
 80a1e20:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1e24:	2a00      	cmp	r2, #0
 80a1e26:	d1fb      	bne.n	80a1e20 <strlen+0x2>
 80a1e28:	1a18      	subs	r0, r3, r0
 80a1e2a:	3801      	subs	r0, #1
 80a1e2c:	4770      	bx	lr

080a1e2e <link_code_end>:
	...

080a1e30 <dynalib_user>:
 80a1e30:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a1e40:	0000 0000 6e6f 7300 6b62 6953 6e67 6c2f     ....on.sbkSign/l
 80a1e50:	6769 7468 7453 7461 0065 666f 0066 6273     ightState.off.sb
 80a1e60:	536b 6769 2f6e 6f74 6767 656c 694c 6867     kSign/toggleLigh
 80a1e70:	0074 0000                                   t...

080a1e74 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a1e7c:	0859 080a 085f 080a 0875 080a 086b 080a     Y..._...u...k...
 80a1e8c:	085b 080a                                   [...

080a1e90 <_ZTV7TwoWire>:
	...
 80a1e98:	0dd5 080a 0e1f 080a 0df7 080a 0dd7 080a     ................
 80a1ea8:	0dff 080a 0e07 080a 0e0f 080a 0e17 080a     ................

080a1eb8 <_ZTV9IPAddress>:
	...
 80a1ec0:	0e67 080a 0e59 080a 0e5b 080a 6e6c 6600     g...Y...[...ln.f
 80a1ed0:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
 80a1ee0:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
 80a1ef0:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
 80a1f00:	2500 0069 6564 6174 6c69 2073 203d 6200     .%i.details = .b
 80a1f10:	7561 0064 6553 6972 6c61 5500 4253 6553     aud.Serial.USBSe
 80a1f20:	6972 6c61 0031 7974 6570 7000 7261 6d61     rial1.type.param
 80a1f30:	6300 646d 6900 0064 6e68 0064 7473 6d72     .cmd.id.hnd.strm
 80a1f40:	6600 6c69 0074 766c 006c 6461 4864 6e61     .filt.lvl.addHan
 80a1f50:	6c64 7265 7200 6d65 766f 4865 6e61 6c64     dler.removeHandl
 80a1f60:	7265 6500 756e 486d 6e61 6c64 7265 0073     er.enumHandlers.
 80a1f70:	534a 4e4f 7453 6572 6d61 6f4c 4867 6e61     JSONStreamLogHan
 80a1f80:	6c64 7265 6100 7070 6e00 6e6f 0065 7274     dler.app.none.tr
 80a1f90:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a1fa0:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080a1fb0 <_ZTV8SPIClass>:
	...
 80a1fb8:	0fb1 080a 0fb3 080a 005a 2b25 3330 3a64     ........Z.%+03d:
 80a1fc8:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a1fd8:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a1fe8:	0000 0000                                   ....

080a1fec <_ZTV11USARTSerial>:
	...
 80a1ff4:	1009 080a 102d 080a 1039 080a 0edd 080a     ....-...9.......
 80a2004:	1015 080a 1021 080a 101b 080a 1027 080a     ....!.......'...
 80a2014:	100b 080a 100f 080a                         ........

080a201c <_ZTV9USBSerial>:
	...
 80a2024:	10e1 080a 1125 080a 10ff 080a 0edd 080a     ....%...........
 80a2034:	10f9 080a 10e3 080a 10eb 080a 111f 080a     ................
 80a2044:	10f3 080a 10dd 080a                         ........

080a204c <_ZTVN5spark9WiFiClassE>:
	...
 80a2054:	124b 080a                                   K...

080a2058 <__sf_fake_stdin>:
	...

080a2078 <__sf_fake_stdout>:
	...

080a2098 <__sf_fake_stderr>:
	...
 80a20b8:	0043                                        C.

080a20ba <link_const_variable_data_end>:
	...

080a20bc <link_constructors_location>:
 80a20bc:	080a0279 	.word	0x080a0279
 80a20c0:	080a0545 	.word	0x080a0545
 80a20c4:	080a0ecd 	.word	0x080a0ecd
 80a20c8:	080a0f95 	.word	0x080a0f95
 80a20cc:	080a0fef 	.word	0x080a0fef
 80a20d0:	080a0ff5 	.word	0x080a0ff5
 80a20d4:	080a1255 	.word	0x080a1255
 80a20d8:	080a149d 	.word	0x080a149d
 80a20dc:	080a14cd 	.word	0x080a14cd
 80a20e0:	080a1521 	.word	0x080a1521
 80a20e4:	080a15e5 	.word	0x080a15e5
 80a20e8:	080a1669 	.word	0x080a1669
 80a20ec:	080a16ed 	.word	0x080a16ed
